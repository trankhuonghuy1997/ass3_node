{"ast":null,"code":"/**\r\n * alertifyjs 1.13.1 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\n(function (window) {\n  'use strict';\n\n  var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\n  /**\r\n   * Keys enum\r\n   * @type {Object}\r\n   */\n  var keys = {\n    ENTER: 13,\n    ESC: 27,\n    F1: 112,\n    F12: 123,\n    LEFT: 37,\n    RIGHT: 39,\n    TAB: 9\n  };\n  /**\r\n   * Default options \r\n   * @type {Object}\r\n   */\n  var defaults = {\n    autoReset: true,\n    basic: false,\n    closable: true,\n    closableByDimmer: true,\n    invokeOnCloseOff: false,\n    frameless: false,\n    defaultFocusOff: false,\n    maintainFocus: true,\n    //global default not per instance, applies to all dialogs\n    maximizable: true,\n    modal: true,\n    movable: true,\n    moveBounded: false,\n    overflow: true,\n    padding: true,\n    pinnable: true,\n    pinned: true,\n    preventBodyShift: false,\n    //global default not per instance, applies to all dialogs\n    resizable: true,\n    startMaximized: false,\n    transition: 'pulse',\n    transitionOff: false,\n    tabbable: ['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])' + NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET + ','),\n    //global\n    notifier: {\n      delay: 5,\n      position: 'bottom-right',\n      closeButton: false,\n      classes: {\n        base: 'alertify-notifier',\n        prefix: 'ajs-',\n        message: 'ajs-message',\n        top: 'ajs-top',\n        right: 'ajs-right',\n        bottom: 'ajs-bottom',\n        left: 'ajs-left',\n        center: 'ajs-center',\n        visible: 'ajs-visible',\n        hidden: 'ajs-hidden',\n        close: 'ajs-close'\n      }\n    },\n    glossary: {\n      title: 'AlertifyJS',\n      ok: 'OK',\n      cancel: 'Cancel',\n      acccpt: 'Accept',\n      deny: 'Deny',\n      confirm: 'Confirm',\n      decline: 'Decline',\n      close: 'Close',\n      maximize: 'Maximize',\n      restore: 'Restore'\n    },\n    theme: {\n      input: 'ajs-input',\n      ok: 'ajs-ok',\n      cancel: 'ajs-cancel'\n    },\n    hooks: {\n      preinit: function () {},\n      postinit: function () {}\n    }\n  };\n\n  //holds open dialogs instances\n  var openDialogs = [];\n\n  /**\r\n   * [Helper]  Adds the specified class(es) to the element.\r\n   *\r\n   * @element {node}      The element\r\n   * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n   * \r\n   * @return {undefined}\r\n   */\n  function addClass(element, classNames) {\n    element.className += ' ' + classNames;\n  }\n\n  /**\r\n   * [Helper]  Removes the specified class(es) from the element.\r\n   *\r\n   * @element {node}      The element\r\n   * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n   * \r\n   * @return {undefined}\r\n   */\n  function removeClass(element, classNames) {\n    var original = element.className.split(' ');\n    var toBeRemoved = classNames.split(' ');\n    for (var x = 0; x < toBeRemoved.length; x += 1) {\n      var index = original.indexOf(toBeRemoved[x]);\n      if (index > -1) {\n        original.splice(index, 1);\n      }\n    }\n    element.className = original.join(' ');\n  }\n\n  /**\r\n   * [Helper]  Checks if the document is RTL\r\n   *\r\n   * @return {Boolean} True if the document is RTL, false otherwise.\r\n   */\n  function isRightToLeft() {\n    return window.getComputedStyle(document.body).direction === 'rtl';\n  }\n  /**\r\n   * [Helper]  Get the document current scrollTop\r\n   *\r\n   * @return {Number} current document scrollTop value\r\n   */\n  function getScrollTop() {\n    return document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;\n  }\n\n  /**\r\n   * [Helper]  Get the document current scrollLeft\r\n   *\r\n   * @return {Number} current document scrollLeft value\r\n   */\n  function getScrollLeft() {\n    return document.documentElement && document.documentElement.scrollLeft || document.body.scrollLeft;\n  }\n\n  /**\r\n  * Helper: clear contents\r\n  *\r\n  */\n  function clearContents(element) {\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  }\n  /**\r\n   * Extends a given prototype by merging properties from base into sub.\r\n   *\r\n   * @sub {Object} sub The prototype being overwritten.\r\n   * @base {Object} base The prototype being written.\r\n   *\r\n   * @return {Object} The extended prototype.\r\n   */\n  function copy(src) {\n    if (null === src) {\n      return src;\n    }\n    var cpy;\n    if (Array.isArray(src)) {\n      cpy = [];\n      for (var x = 0; x < src.length; x += 1) {\n        cpy.push(copy(src[x]));\n      }\n      return cpy;\n    }\n    if (src instanceof Date) {\n      return new Date(src.getTime());\n    }\n    if (src instanceof RegExp) {\n      cpy = new RegExp(src.source);\n      cpy.global = src.global;\n      cpy.ignoreCase = src.ignoreCase;\n      cpy.multiline = src.multiline;\n      cpy.lastIndex = src.lastIndex;\n      return cpy;\n    }\n    if (typeof src === 'object') {\n      cpy = {};\n      // copy dialog pototype over definition.\n      for (var prop in src) {\n        if (src.hasOwnProperty(prop)) {\n          cpy[prop] = copy(src[prop]);\n        }\n      }\n      return cpy;\n    }\n    return src;\n  }\n  /**\r\n    * Helper: destruct the dialog\r\n    *\r\n    */\n  function destruct(instance, initialize) {\n    if (instance.elements) {\n      //delete the dom and it's references.\n      var root = instance.elements.root;\n      root.parentNode.removeChild(root);\n      delete instance.elements;\n      //copy back initial settings.\n      instance.settings = copy(instance.__settings);\n      //re-reference init function.\n      instance.__init = initialize;\n      //delete __internal variable to allow re-initialization.\n      delete instance.__internal;\n    }\n  }\n\n  /**\r\n   * Test to check if passive event listeners are supported.\r\n   */\n  var IsPassiveSupported = false;\n  try {\n    var options = Object.defineProperty({}, 'passive', {\n      get: function () {\n        IsPassiveSupported = true;\n      }\n    });\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n  } catch (e) {}\n\n  /**\r\n  * Removes an event listener\r\n  *\r\n  * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n  * @param {string} event The event type to listen for.\r\n  * @param {Function} handler The function to handle the event.\r\n  * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n  * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n  */\n  var on = function (el, event, fn, useCapture, passive) {\n    el.addEventListener(event, fn, IsPassiveSupported ? {\n      capture: useCapture,\n      passive: passive\n    } : useCapture === true);\n  };\n\n  /**\r\n   * Removes an event listener\r\n   *\r\n   * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n   * @param {string} event The event type to remove.\r\n   * @param {Function} fn The event handler to remove.\r\n   * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n   * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n   */\n  var off = function (el, event, fn, useCapture, passive) {\n    el.removeEventListener(event, fn, IsPassiveSupported ? {\n      capture: useCapture,\n      passive: passive\n    } : useCapture === true);\n  };\n\n  /**\r\n   * Prevent default event from firing\r\n   *\r\n   * @param  {Event} event Event object\r\n   * @return {undefined}\r\n    function prevent ( event ) {\r\n      if ( event ) {\r\n          if ( event.preventDefault ) {\r\n              event.preventDefault();\r\n          } else {\r\n              event.returnValue = false;\r\n          }\r\n      }\r\n  }\r\n  */\n  var transition = function () {\n    var t, type;\n    var supported = false;\n    var transitions = {\n      'animation': 'animationend',\n      'OAnimation': 'oAnimationEnd oanimationend',\n      'msAnimation': 'MSAnimationEnd',\n      'MozAnimation': 'animationend',\n      'WebkitAnimation': 'webkitAnimationEnd'\n    };\n    for (t in transitions) {\n      if (document.documentElement.style[t] !== undefined) {\n        type = transitions[t];\n        supported = true;\n        break;\n      }\n    }\n    return {\n      type: type,\n      supported: supported\n    };\n  }();\n\n  /**\r\n  * Creates event handler delegate that sends the instance as last argument.\r\n  * \r\n  * @return {Function}    a function wrapper which sends the instance as last argument.\r\n  */\n  function delegate(context, method) {\n    return function () {\n      if (arguments.length > 0) {\n        var args = [];\n        for (var x = 0; x < arguments.length; x += 1) {\n          args.push(arguments[x]);\n        }\n        args.push(context);\n        return method.apply(context, args);\n      }\n      return method.apply(context, [null, context]);\n    };\n  }\n  /**\r\n  * Helper for creating a dialog close event.\r\n  * \r\n  * @return {object}\r\n  */\n  function createCloseEvent(index, button) {\n    return {\n      index: index,\n      button: button,\n      cancel: false\n    };\n  }\n  /**\r\n  * Helper for dispatching events.\r\n  *\r\n  * @param  {string} evenType The type of the event to disptach.\r\n  * @param  {object} instance The dialog instance disptaching the event.\r\n  *\r\n  * @return   {any}   The result of the invoked function.\r\n  */\n  function dispatchEvent(eventType, instance) {\n    if (typeof instance.get(eventType) === 'function') {\n      return instance.get(eventType).call(instance);\n    }\n  }\n\n  /**\r\n   * Super class for all dialogs\r\n   *\r\n   * @return {Object}\t\tbase dialog prototype\r\n   */\n  var dialog = function () {\n    var\n      //holds the list of used keys.\n      usedKeys = [],\n      //dummy variable, used to trigger dom reflow.\n      reflow = null,\n      //holds body tab index in case it has any.\n      tabindex = false,\n      //condition for detecting safari\n      isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\n      //dialog building blocks\n      templates = {\n        dimmer: '<div class=\"ajs-dimmer\"></div>',\n        /*tab index required to fire click event before body focus*/\n        modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\n        dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\n        reset: '<button class=\"ajs-reset\"></button>',\n        commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\n        header: '<div class=\"ajs-header\"></div>',\n        body: '<div class=\"ajs-body\"></div>',\n        content: '<div class=\"ajs-content\"></div>',\n        footer: '<div class=\"ajs-footer\"></div>',\n        buttons: {\n          primary: '<div class=\"ajs-primary ajs-buttons\"></div>',\n          auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>'\n        },\n        button: '<button class=\"ajs-button\"></button>',\n        resizeHandle: '<div class=\"ajs-handle\"></div>'\n      },\n      //common class names\n      classes = {\n        animationIn: 'ajs-in',\n        animationOut: 'ajs-out',\n        base: 'alertify',\n        basic: 'ajs-basic',\n        capture: 'ajs-capture',\n        closable: 'ajs-closable',\n        fixed: 'ajs-fixed',\n        frameless: 'ajs-frameless',\n        hidden: 'ajs-hidden',\n        maximize: 'ajs-maximize',\n        maximized: 'ajs-maximized',\n        maximizable: 'ajs-maximizable',\n        modeless: 'ajs-modeless',\n        movable: 'ajs-movable',\n        noSelection: 'ajs-no-selection',\n        noOverflow: 'ajs-no-overflow',\n        noPadding: 'ajs-no-padding',\n        pin: 'ajs-pin',\n        pinnable: 'ajs-pinnable',\n        prefix: 'ajs-',\n        resizable: 'ajs-resizable',\n        restore: 'ajs-restore',\n        shake: 'ajs-shake',\n        unpinned: 'ajs-unpinned',\n        noTransition: 'ajs-no-transition'\n      };\n\n    /**\r\n     * Helper: initializes the dialog instance\r\n     * \r\n     * @return\t{Number}\tThe total count of currently open modals.\r\n     */\n    function initialize(instance) {\n      if (!instance.__internal) {\n        //invoke preinit global hook\n        alertify.defaults.hooks.preinit(instance);\n        //no need to expose init after this.\n        delete instance.__init;\n\n        //keep a copy of initial dialog settings\n        if (!instance.__settings) {\n          instance.__settings = copy(instance.settings);\n        }\n\n        //get dialog buttons/focus setup\n        var setup;\n        if (typeof instance.setup === 'function') {\n          setup = instance.setup();\n          setup.options = setup.options || {};\n          setup.focus = setup.focus || {};\n        } else {\n          setup = {\n            buttons: [],\n            focus: {\n              element: null,\n              select: false\n            },\n            options: {}\n          };\n        }\n\n        //initialize hooks object.\n        if (typeof instance.hooks !== 'object') {\n          instance.hooks = {};\n        }\n\n        //copy buttons defintion\n        var buttonsDefinition = [];\n        if (Array.isArray(setup.buttons)) {\n          for (var b = 0; b < setup.buttons.length; b += 1) {\n            var ref = setup.buttons[b],\n              cpy = {};\n            for (var i in ref) {\n              if (ref.hasOwnProperty(i)) {\n                cpy[i] = ref[i];\n              }\n            }\n            buttonsDefinition.push(cpy);\n          }\n        }\n        var internal = instance.__internal = {\n          /**\r\n           * Flag holding the open state of the dialog\r\n           * \r\n           * @type {Boolean}\r\n           */\n          isOpen: false,\n          /**\r\n           * Active element is the element that will receive focus after\r\n           * closing the dialog. It defaults as the body tag, but gets updated\r\n           * to the last focused element before the dialog was opened.\r\n           *\r\n           * @type {Node}\r\n           */\n          activeElement: document.body,\n          timerIn: undefined,\n          timerOut: undefined,\n          buttons: buttonsDefinition,\n          focus: setup.focus,\n          options: {\n            title: undefined,\n            modal: undefined,\n            basic: undefined,\n            frameless: undefined,\n            defaultFocusOff: undefined,\n            pinned: undefined,\n            movable: undefined,\n            moveBounded: undefined,\n            resizable: undefined,\n            autoReset: undefined,\n            closable: undefined,\n            closableByDimmer: undefined,\n            invokeOnCloseOff: undefined,\n            maximizable: undefined,\n            startMaximized: undefined,\n            pinnable: undefined,\n            transition: undefined,\n            transitionOff: undefined,\n            padding: undefined,\n            overflow: undefined,\n            onshow: undefined,\n            onclosing: undefined,\n            onclose: undefined,\n            onfocus: undefined,\n            onmove: undefined,\n            onmoved: undefined,\n            onresize: undefined,\n            onresized: undefined,\n            onmaximize: undefined,\n            onmaximized: undefined,\n            onrestore: undefined,\n            onrestored: undefined\n          },\n          resetHandler: undefined,\n          beginMoveHandler: undefined,\n          beginResizeHandler: undefined,\n          bringToFrontHandler: undefined,\n          modalClickHandler: undefined,\n          buttonsClickHandler: undefined,\n          commandsClickHandler: undefined,\n          transitionInHandler: undefined,\n          transitionOutHandler: undefined,\n          destroy: undefined\n        };\n        var elements = {};\n        //root node\n        elements.root = document.createElement('div');\n        //prevent FOUC in case of async styles loading.\n        elements.root.style.display = 'none';\n        elements.root.className = classes.base + ' ' + classes.hidden + ' ';\n        elements.root.innerHTML = templates.dimmer + templates.modal;\n\n        //dimmer\n        elements.dimmer = elements.root.firstChild;\n\n        //dialog\n        elements.modal = elements.root.lastChild;\n        elements.modal.innerHTML = templates.dialog;\n        elements.dialog = elements.modal.firstChild;\n        elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\n\n        //reset links\n        elements.reset = [];\n        elements.reset.push(elements.dialog.firstChild);\n        elements.reset.push(elements.dialog.lastChild);\n\n        //commands\n        elements.commands = {};\n        elements.commands.container = elements.reset[0].nextSibling;\n        elements.commands.pin = elements.commands.container.firstChild;\n        elements.commands.maximize = elements.commands.pin.nextSibling;\n        elements.commands.close = elements.commands.maximize.nextSibling;\n\n        //header\n        elements.header = elements.commands.container.nextSibling;\n\n        //body\n        elements.body = elements.header.nextSibling;\n        elements.body.innerHTML = templates.content;\n        elements.content = elements.body.firstChild;\n\n        //footer\n        elements.footer = elements.body.nextSibling;\n        elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\n\n        //resize handle\n        elements.resizeHandle = elements.footer.nextSibling;\n\n        //buttons\n        elements.buttons = {};\n        elements.buttons.auxiliary = elements.footer.firstChild;\n        elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\n        elements.buttons.primary.innerHTML = templates.button;\n        elements.buttonTemplate = elements.buttons.primary.firstChild;\n        //remove button template\n        elements.buttons.primary.removeChild(elements.buttonTemplate);\n        for (var x = 0; x < instance.__internal.buttons.length; x += 1) {\n          var button = instance.__internal.buttons[x];\n\n          // add to the list of used keys.\n          if (usedKeys.indexOf(button.key) < 0) {\n            usedKeys.push(button.key);\n          }\n          button.element = elements.buttonTemplate.cloneNode();\n          button.element.innerHTML = button.text;\n          if (typeof button.className === 'string' && button.className !== '') {\n            addClass(button.element, button.className);\n          }\n          for (var key in button.attrs) {\n            if (key !== 'className' && button.attrs.hasOwnProperty(key)) {\n              button.element.setAttribute(key, button.attrs[key]);\n            }\n          }\n          if (button.scope === 'auxiliary') {\n            elements.buttons.auxiliary.appendChild(button.element);\n          } else {\n            elements.buttons.primary.appendChild(button.element);\n          }\n        }\n        //make elements pubic\n        instance.elements = elements;\n\n        //save event handlers delegates\n        internal.resetHandler = delegate(instance, onReset);\n        internal.beginMoveHandler = delegate(instance, beginMove);\n        internal.beginResizeHandler = delegate(instance, beginResize);\n        internal.bringToFrontHandler = delegate(instance, bringToFront);\n        internal.modalClickHandler = delegate(instance, modalClickHandler);\n        internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\n        internal.commandsClickHandler = delegate(instance, commandsClickHandler);\n        internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\n        internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\n\n        //settings\n        for (var opKey in internal.options) {\n          if (setup.options[opKey] !== undefined) {\n            // if found in user options\n            instance.set(opKey, setup.options[opKey]);\n          } else if (alertify.defaults.hasOwnProperty(opKey)) {\n            // else if found in defaults options\n            instance.set(opKey, alertify.defaults[opKey]);\n          } else if (opKey === 'title') {\n            // else if title key, use alertify.defaults.glossary\n            instance.set(opKey, alertify.defaults.glossary[opKey]);\n          }\n        }\n\n        // allow dom customization\n        if (typeof instance.build === 'function') {\n          instance.build();\n        }\n\n        //invoke postinit global hook\n        alertify.defaults.hooks.postinit(instance);\n      }\n\n      //add to the end of the DOM tree.\n      document.body.appendChild(instance.elements.root);\n    }\n\n    /**\r\n     * Helper: maintains scroll position\r\n     *\r\n     */\n    var scrollX, scrollY;\n    function saveScrollPosition() {\n      scrollX = getScrollLeft();\n      scrollY = getScrollTop();\n    }\n    function restoreScrollPosition() {\n      window.scrollTo(scrollX, scrollY);\n    }\n\n    /**\r\n     * Helper: adds/removes no-overflow class from body\r\n     *\r\n     */\n    function ensureNoOverflow() {\n      var requiresNoOverflow = 0;\n      for (var x = 0; x < openDialogs.length; x += 1) {\n        var instance = openDialogs[x];\n        if (instance.isModal() || instance.isMaximized()) {\n          requiresNoOverflow += 1;\n        }\n      }\n      if (requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0) {\n        //last open modal or last maximized one\n        removeClass(document.body, classes.noOverflow);\n        preventBodyShift(false);\n      } else if (requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0) {\n        //first open modal or first maximized one\n        preventBodyShift(true);\n        addClass(document.body, classes.noOverflow);\n      }\n    }\n    var top = '',\n      topScroll = 0;\n    /**\r\n     * Helper: prevents body shift.\r\n     *\r\n     */\n    function preventBodyShift(add) {\n      if (alertify.defaults.preventBodyShift) {\n        if (add && document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n          //&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\n          topScroll = scrollY;\n          top = window.getComputedStyle(document.body).top;\n          addClass(document.body, classes.fixed);\n          document.body.style.top = -scrollY + 'px';\n        } else if (!add) {\n          scrollY = topScroll;\n          document.body.style.top = top;\n          removeClass(document.body, classes.fixed);\n          restoreScrollPosition();\n        }\n      }\n    }\n\n    /**\r\n     * Sets the name of the transition used to show/hide the dialog\r\n     * \r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     */\n    function updateTransition(instance, value, oldValue) {\n      if (typeof oldValue === 'string') {\n        removeClass(instance.elements.root, classes.prefix + oldValue);\n      }\n      addClass(instance.elements.root, classes.prefix + value);\n      reflow = instance.elements.root.offsetWidth;\n    }\n\n    /**\r\n     * Toggles the dialog no transition \r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateTransitionOff(instance) {\n      if (instance.get('transitionOff')) {\n        // add class\n        addClass(instance.elements.root, classes.noTransition);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.noTransition);\n      }\n    }\n\n    /**\r\n     * Toggles the dialog display mode\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateDisplayMode(instance) {\n      if (instance.get('modal')) {\n        //make modal\n        removeClass(instance.elements.root, classes.modeless);\n\n        //only if open\n        if (instance.isOpen()) {\n          unbindModelessEvents(instance);\n\n          //in case a pinned modless dialog was made modal while open.\n          updateAbsPositionFix(instance);\n          ensureNoOverflow();\n        }\n      } else {\n        //make modelss\n        addClass(instance.elements.root, classes.modeless);\n\n        //only if open\n        if (instance.isOpen()) {\n          bindModelessEvents(instance);\n\n          //in case pin/unpin was called while a modal is open\n          updateAbsPositionFix(instance);\n          ensureNoOverflow();\n        }\n      }\n    }\n\n    /**\r\n     * Toggles the dialog basic view mode \r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateBasicMode(instance) {\n      if (instance.get('basic')) {\n        // add class\n        addClass(instance.elements.root, classes.basic);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.basic);\n      }\n    }\n\n    /**\r\n     * Toggles the dialog frameless view mode \r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateFramelessMode(instance) {\n      if (instance.get('frameless')) {\n        // add class\n        addClass(instance.elements.root, classes.frameless);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.frameless);\n      }\n    }\n\n    /**\r\n     * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n     *\r\n     * @param {Event} event Focus event\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bringToFront(event, instance) {\n      // Do not bring to front if preceeded by an open modal\n      var index = openDialogs.indexOf(instance);\n      for (var x = index + 1; x < openDialogs.length; x += 1) {\n        if (openDialogs[x].isModal()) {\n          return;\n        }\n      }\n\n      // Bring to front by making it the last child.\n      if (document.body.lastChild !== instance.elements.root) {\n        document.body.appendChild(instance.elements.root);\n        //also make sure its at the end of the list\n        openDialogs.splice(openDialogs.indexOf(instance), 1);\n        openDialogs.push(instance);\n        setFocus(instance);\n      }\n      return false;\n    }\n\n    /**\r\n     * Helper: reflects dialogs options updates\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {String} option The updated option name.\r\n     *\r\n     * @return\t{undefined}\t\r\n     */\n    function optionUpdated(instance, option, oldValue, newValue) {\n      switch (option) {\n        case 'title':\n          instance.setHeader(newValue);\n          break;\n        case 'modal':\n          updateDisplayMode(instance);\n          break;\n        case 'basic':\n          updateBasicMode(instance);\n          break;\n        case 'frameless':\n          updateFramelessMode(instance);\n          break;\n        case 'pinned':\n          updatePinned(instance);\n          break;\n        case 'closable':\n          updateClosable(instance);\n          break;\n        case 'maximizable':\n          updateMaximizable(instance);\n          break;\n        case 'pinnable':\n          updatePinnable(instance);\n          break;\n        case 'movable':\n          updateMovable(instance);\n          break;\n        case 'resizable':\n          updateResizable(instance);\n          break;\n        case 'padding':\n          if (newValue) {\n            removeClass(instance.elements.root, classes.noPadding);\n          } else if (instance.elements.root.className.indexOf(classes.noPadding) < 0) {\n            addClass(instance.elements.root, classes.noPadding);\n          }\n          break;\n        case 'overflow':\n          if (newValue) {\n            removeClass(instance.elements.root, classes.noOverflow);\n          } else if (instance.elements.root.className.indexOf(classes.noOverflow) < 0) {\n            addClass(instance.elements.root, classes.noOverflow);\n          }\n          break;\n        case 'transition':\n          updateTransition(instance, newValue, oldValue);\n          break;\n        case 'transitionOff':\n          updateTransitionOff(instance);\n          break;\n      }\n\n      // internal on option updated event\n      if (typeof instance.hooks.onupdate === 'function') {\n        instance.hooks.onupdate.call(instance, option, oldValue, newValue);\n      }\n    }\n\n    /**\r\n     * Helper: reflects dialogs options updates\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Object} obj The object to set/get a value on/from.\r\n     * @param {Function} callback The callback function to call if the key was found.\r\n     * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n     * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n     * @param {String} option The updated option name.\r\n     *\r\n     * @return\t{Object} result object \r\n     *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n     *\t\tGET: \r\n     *\t\t- found: a flag indicating if the key was found or not.\r\n     *\t\t- value: the property value.\r\n     *\t\tSET:\r\n     *\t\t- items: a list of key value pairs of the properties being set.\r\n     *\t\t\t\teach contains:\r\n     *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n     *\t\t\t\t\t- key: the property key.\r\n     *\t\t\t\t\t- value: the property value.\r\n     */\n    function update(instance, obj, callback, key, value) {\n      var result = {\n        op: undefined,\n        items: []\n      };\n      if (typeof value === 'undefined' && typeof key === 'string') {\n        //get\n        result.op = 'get';\n        if (obj.hasOwnProperty(key)) {\n          result.found = true;\n          result.value = obj[key];\n        } else {\n          result.found = false;\n          result.value = undefined;\n        }\n      } else {\n        var old;\n        //set\n        result.op = 'set';\n        if (typeof key === 'object') {\n          //set multiple\n          var args = key;\n          for (var prop in args) {\n            if (obj.hasOwnProperty(prop)) {\n              if (obj[prop] !== args[prop]) {\n                old = obj[prop];\n                obj[prop] = args[prop];\n                callback.call(instance, prop, old, args[prop]);\n              }\n              result.items.push({\n                'key': prop,\n                'value': args[prop],\n                'found': true\n              });\n            } else {\n              result.items.push({\n                'key': prop,\n                'value': args[prop],\n                'found': false\n              });\n            }\n          }\n        } else if (typeof key === 'string') {\n          //set single\n          if (obj.hasOwnProperty(key)) {\n            if (obj[key] !== value) {\n              old = obj[key];\n              obj[key] = value;\n              callback.call(instance, key, old, value);\n            }\n            result.items.push({\n              'key': key,\n              'value': value,\n              'found': true\n            });\n          } else {\n            result.items.push({\n              'key': key,\n              'value': value,\n              'found': false\n            });\n          }\n        } else {\n          //invalid params\n          throw new Error('args must be a string or object');\n        }\n      }\n      return result;\n    }\n\n    /**\r\n     * Triggers a close event.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function triggerClose(instance) {\n      var found;\n      triggerCallback(instance, function (button) {\n        return found = instance.get('invokeOnCloseOff') !== true && button.invokeOnClose === true;\n      });\n      //none of the buttons registered as onclose callback\n      //close the dialog\n      if (!found && instance.isOpen()) {\n        instance.close();\n      }\n    }\n\n    /**\r\n     * Dialogs commands event handler, attached to the dialog commands element.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function commandsClickHandler(event, instance) {\n      var target = event.srcElement || event.target;\n      switch (target) {\n        case instance.elements.commands.pin:\n          if (!instance.isPinned()) {\n            pin(instance);\n          } else {\n            unpin(instance);\n          }\n          break;\n        case instance.elements.commands.maximize:\n          if (!instance.isMaximized()) {\n            maximize(instance);\n          } else {\n            restore(instance);\n          }\n          break;\n        case instance.elements.commands.close:\n          triggerClose(instance);\n          break;\n      }\n      return false;\n    }\n\n    /**\r\n     * Helper: pins the modeless dialog.\r\n     *\r\n     * @param {Object} instance\tThe dialog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function pin(instance) {\n      //pin the dialog\n      instance.set('pinned', true);\n    }\n\n    /**\r\n     * Helper: unpins the modeless dialog.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function unpin(instance) {\n      //unpin the dialog \n      instance.set('pinned', false);\n    }\n\n    /**\r\n     * Helper: enlarges the dialog to fill the entire screen.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function maximize(instance) {\n      // allow custom `onmaximize` method\n      dispatchEvent('onmaximize', instance);\n      //maximize the dialog \n      addClass(instance.elements.root, classes.maximized);\n      if (instance.isOpen()) {\n        ensureNoOverflow();\n      }\n      // allow custom `onmaximized` method\n      dispatchEvent('onmaximized', instance);\n    }\n\n    /**\r\n     * Helper: returns the dialog to its former size.\r\n     *\r\n     * @param {Object} instance\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function restore(instance) {\n      // allow custom `onrestore` method\n      dispatchEvent('onrestore', instance);\n      //maximize the dialog \n      removeClass(instance.elements.root, classes.maximized);\n      if (instance.isOpen()) {\n        ensureNoOverflow();\n      }\n      // allow custom `onrestored` method\n      dispatchEvent('onrestored', instance);\n    }\n\n    /**\r\n     * Show or hide the maximize box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updatePinnable(instance) {\n      if (instance.get('pinnable')) {\n        // add class\n        addClass(instance.elements.root, classes.pinnable);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.pinnable);\n      }\n    }\n\n    /**\r\n     * Helper: Fixes the absolutly positioned modal div position.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function addAbsPositionFix(instance) {\n      var scrollLeft = getScrollLeft();\n      instance.elements.modal.style.marginTop = getScrollTop() + 'px';\n      instance.elements.modal.style.marginLeft = scrollLeft + 'px';\n      instance.elements.modal.style.marginRight = -scrollLeft + 'px';\n    }\n\n    /**\r\n     * Helper: Removes the absolutly positioned modal div position fix.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function removeAbsPositionFix(instance) {\n      var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\n      var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\n      instance.elements.modal.style.marginTop = '';\n      instance.elements.modal.style.marginLeft = '';\n      instance.elements.modal.style.marginRight = '';\n      if (instance.isOpen()) {\n        var top = 0,\n          left = 0;\n        if (instance.elements.dialog.style.top !== '') {\n          top = parseInt(instance.elements.dialog.style.top, 10);\n        }\n        instance.elements.dialog.style.top = top + (marginTop - getScrollTop()) + 'px';\n        if (instance.elements.dialog.style.left !== '') {\n          left = parseInt(instance.elements.dialog.style.left, 10);\n        }\n        instance.elements.dialog.style.left = left + (marginLeft - getScrollLeft()) + 'px';\n      }\n    }\n    /**\r\n     * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n     *\r\n     * @param {Object} instance The dialog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateAbsPositionFix(instance) {\n      // if modeless and unpinned add fix\n      if (!instance.get('modal') && !instance.get('pinned')) {\n        addAbsPositionFix(instance);\n      } else {\n        removeAbsPositionFix(instance);\n      }\n    }\n    /**\r\n     * Toggles the dialog position lock | modeless only.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to make it modal, false otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updatePinned(instance) {\n      if (instance.get('pinned')) {\n        removeClass(instance.elements.root, classes.unpinned);\n        if (instance.isOpen()) {\n          removeAbsPositionFix(instance);\n        }\n      } else {\n        addClass(instance.elements.root, classes.unpinned);\n        if (instance.isOpen() && !instance.isModal()) {\n          addAbsPositionFix(instance);\n        }\n      }\n    }\n\n    /**\r\n     * Show or hide the maximize box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateMaximizable(instance) {\n      if (instance.get('maximizable')) {\n        // add class\n        addClass(instance.elements.root, classes.maximizable);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.maximizable);\n      }\n    }\n\n    /**\r\n     * Show or hide the close box.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateClosable(instance) {\n      if (instance.get('closable')) {\n        // add class\n        addClass(instance.elements.root, classes.closable);\n        bindClosableEvents(instance);\n      } else {\n        // remove class\n        removeClass(instance.elements.root, classes.closable);\n        unbindClosableEvents(instance);\n      }\n    }\n    var cancelClick = false,\n      // flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\n      modalClickHandlerTS = 0 // stores last click timestamp to prevent executing the handler twice on double click.\n    ;\n\n    /**\r\n     * Helper: closes the modal dialog when clicking the modal\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function modalClickHandler(event, instance) {\n      if (event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick) {\n        var target = event.srcElement || event.target;\n        if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\n          triggerClose(instance);\n        }\n      }\n      cancelClick = false;\n    }\n\n    // stores last call timestamp to prevent triggering the callback twice.\n    var callbackTS = 0;\n    // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\n    var cancelKeyup = false;\n    /** \r\n     * Helper: triggers a button callback\r\n     *\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * @param {Function}\tCallback to check which button triggered the event.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function triggerCallback(instance, check) {\n      if (Date.now() - callbackTS > 200 && (callbackTS = Date.now())) {\n        for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\n          var button = instance.__internal.buttons[idx];\n          if (!button.element.disabled && check(button)) {\n            var closeEvent = createCloseEvent(idx, button);\n            if (typeof instance.callback === 'function') {\n              instance.callback.apply(instance, [closeEvent]);\n            }\n            //close the dialog only if not canceled.\n            if (closeEvent.cancel === false) {\n              instance.close();\n            }\n            break;\n          }\n        }\n      }\n    }\n\n    /**\r\n     * Clicks event handler, attached to the dialog footer.\r\n     *\r\n     * @param {Event}\t\tDOM event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function buttonsClickHandler(event, instance) {\n      var target = event.srcElement || event.target;\n      triggerCallback(instance, function (button) {\n        // if this button caused the click, cancel keyup event\n        return button.element === target && (cancelKeyup = true);\n      });\n    }\n\n    /**\r\n     * Keyup event handler, attached to the document.body\r\n     *\r\n     * @param {Event}\t\tDOM event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function keyupHandler(event) {\n      //hitting enter while button has focus will trigger keyup too.\n      //ignore if handled by clickHandler\n      if (cancelKeyup) {\n        cancelKeyup = false;\n        return;\n      }\n      var instance = openDialogs[openDialogs.length - 1];\n      var keyCode = event.keyCode;\n      if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\n        triggerClose(instance);\n        return false;\n      } else if (usedKeys.indexOf(keyCode) > -1) {\n        triggerCallback(instance, function (button) {\n          return button.key === keyCode;\n        });\n        return false;\n      }\n    }\n    /**\r\n    * Keydown event handler, attached to the document.body\r\n    *\r\n    * @param {Event}\t\tDOM event object.\r\n    * @param {Object}\t\tThe dilog instance.\r\n    * \r\n    * @return {undefined}\r\n    */\n    function keydownHandler(event) {\n      var instance = openDialogs[openDialogs.length - 1];\n      var keyCode = event.keyCode;\n      if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\n        var buttons = instance.__internal.buttons;\n        for (var x = 0; x < buttons.length; x += 1) {\n          if (document.activeElement === buttons[x].element) {\n            switch (keyCode) {\n              case keys.LEFT:\n                buttons[(x || buttons.length) - 1].element.focus();\n                return;\n              case keys.RIGHT:\n                buttons[(x + 1) % buttons.length].element.focus();\n                return;\n            }\n          }\n        }\n      } else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\n        event.preventDefault();\n        event.stopPropagation();\n        triggerCallback(instance, function (button) {\n          return button.key === keyCode;\n        });\n        return false;\n      }\n    }\n\n    /**\r\n     * Sets focus to proper dialog element\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function setFocus(instance, resetTarget) {\n      // reset target has already been determined.\n      if (resetTarget) {\n        resetTarget.focus();\n      } else {\n        // current instance focus settings\n        var focus = instance.__internal.focus;\n        // the focus element.\n        var element = focus.element;\n        switch (typeof focus.element) {\n          // a number means a button index\n          case 'number':\n            if (instance.__internal.buttons.length > focus.element) {\n              //in basic view, skip focusing the buttons.\n              if (instance.get('basic') === true) {\n                element = instance.elements.reset[0];\n              } else {\n                element = instance.__internal.buttons[focus.element].element;\n              }\n            }\n            break;\n          // a string means querySelector to select from dialog body contents.\n          case 'string':\n            element = instance.elements.body.querySelector(focus.element);\n            break;\n          // a function should return the focus element.\n          case 'function':\n            element = focus.element.call(instance);\n            break;\n        }\n\n        // if no focus element, default to first reset element.\n        if (instance.get('defaultFocusOff') === true || (typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0) {\n          element = instance.elements.reset[0];\n        }\n        // focus\n        if (element && element.focus) {\n          element.focus();\n          // if selectable\n          if (focus.select && element.select) {\n            element.select();\n          }\n        }\n      }\n    }\n\n    /**\r\n     * Focus event handler, attached to document.body and dialogs own reset links.\r\n     * handles the focus for modal dialogs only.\r\n     *\r\n     * @param {Event} event DOM focus event object.\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function onReset(event, instance) {\n      // should work on last modal if triggered from document.body \n      if (!instance) {\n        for (var x = openDialogs.length - 1; x > -1; x -= 1) {\n          if (openDialogs[x].isModal()) {\n            instance = openDialogs[x];\n            break;\n          }\n        }\n      }\n      if (instance) {\n        // if modal\n        if (instance.isModal()) {\n          // determine reset target to enable forward/backward tab cycle.\n          var firstReset = instance.elements.reset[0],\n            lastReset = instance.elements.reset[1],\n            lastFocusedElement = event.relatedTarget,\n            within = instance.elements.root.contains(lastFocusedElement),\n            target = event.srcElement || event.target,\n            resetTarget;\n\n          //if the previous focused element element was outside the modal do nthing\n          if ( /*first show */\n          target === firstReset && !within || /*focus cycle */\n          target === lastReset && lastFocusedElement === firstReset) {\n            return;\n          } else if (target === lastReset || target === document.body) {\n            resetTarget = firstReset;\n          } else if (target === firstReset && lastFocusedElement === lastReset) {\n            resetTarget = findTabbable(instance);\n          } else if (target === firstReset && within) {\n            resetTarget = findTabbable(instance, true);\n          }\n          // focus\n          setFocus(instance, resetTarget);\n        }\n      }\n    }\n    function findTabbable(instance, last) {\n      var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\n      if (last) {\n        tabbables.reverse();\n      }\n      for (var x = 0; x < tabbables.length; x += 1) {\n        var tabbable = tabbables[x];\n        //check if visible\n        if (!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)) {\n          return tabbable;\n        }\n      }\n    }\n    function recycleTab(event) {\n      var instance = openDialogs[openDialogs.length - 1];\n      if (instance && event.shiftKey && event.keyCode === keys.TAB) {\n        instance.elements.reset[1].focus();\n      }\n    }\n    /**\r\n     * Transition in transitionend event handler. \r\n     *\r\n     * @param {Event}\t\tTransitionEnd event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function handleTransitionInEvent(event, instance) {\n      // clear the timer\n      clearTimeout(instance.__internal.timerIn);\n\n      // once transition is complete, set focus\n      setFocus(instance);\n\n      // allow handling key up after transition ended.\n      cancelKeyup = false;\n\n      // allow custom `onfocus` method\n      dispatchEvent('onfocus', instance);\n\n      // unbind the event\n      off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\n      removeClass(instance.elements.root, classes.animationIn);\n    }\n\n    /**\r\n     * Transition out transitionend event handler. \r\n     *\r\n     * @param {Event}\t\tTransitionEnd event object.\r\n     * @param {Object}\t\tThe dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function handleTransitionOutEvent(event, instance) {\n      // clear the timer\n      clearTimeout(instance.__internal.timerOut);\n      // unbind the event\n      off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\n\n      // reset move updates\n      resetMove(instance);\n      // reset resize updates\n      resetResize(instance);\n\n      // restore if maximized\n      if (instance.isMaximized() && !instance.get('startMaximized')) {\n        restore(instance);\n      }\n\n      //destory the instance\n      if (typeof instance.__internal.destroy === 'function') {\n        instance.__internal.destroy.apply(instance);\n      }\n    }\n    /* Controls moving a dialog around */\n    //holde the current moving instance\n    var movable = null,\n      //holds the current X offset when move starts\n      offsetX = 0,\n      //holds the current Y offset when move starts\n      offsetY = 0,\n      xProp = 'pageX',\n      yProp = 'pageY',\n      bounds = null,\n      refreshTop = false,\n      moveDelegate = null;\n\n    /**\r\n     * Helper: sets the element top/left coordinates\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Node} element The element being moved.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function moveElement(event, element) {\n      var left = event[xProp] - offsetX,\n        top = event[yProp] - offsetY;\n      if (refreshTop) {\n        top -= document.body.scrollTop;\n      }\n      element.style.left = left + 'px';\n      element.style.top = top + 'px';\n    }\n    /**\r\n     * Helper: sets the element top/left coordinates within screen bounds\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Node} element The element being moved.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function moveElementBounded(event, element) {\n      var left = event[xProp] - offsetX,\n        top = event[yProp] - offsetY;\n      if (refreshTop) {\n        top -= document.body.scrollTop;\n      }\n      element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\n      if (refreshTop) {\n        element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\n      } else {\n        element.style.top = Math.max(bounds.minTop, top) + 'px';\n      }\n    }\n\n    /**\r\n     * Triggers the start of a move event, attached to the header element mouse down event.\r\n     * Adds no-selection class to the body, disabling selection while moving.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     * \r\n     * @return {Boolean} false\r\n     */\n    function beginMove(event, instance) {\n      if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\n        var eventSrc,\n          left = 0,\n          top = 0;\n        if (event.type === 'touchstart') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n          xProp = 'clientX';\n          yProp = 'clientY';\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n        if (eventSrc) {\n          var element = instance.elements.dialog;\n          addClass(element, classes.capture);\n          if (element.style.left) {\n            left = parseInt(element.style.left, 10);\n          }\n          if (element.style.top) {\n            top = parseInt(element.style.top, 10);\n          }\n          offsetX = eventSrc[xProp] - left;\n          offsetY = eventSrc[yProp] - top;\n          if (instance.isModal()) {\n            offsetY += instance.elements.modal.scrollTop;\n          } else if (instance.isPinned()) {\n            offsetY -= document.body.scrollTop;\n          }\n          if (instance.get('moveBounded')) {\n            var current = element,\n              offsetLeft = -left,\n              offsetTop = -top;\n\n            //calc offset\n            do {\n              offsetLeft += current.offsetLeft;\n              offsetTop += current.offsetTop;\n            } while (current = current.offsetParent);\n            bounds = {\n              maxLeft: offsetLeft,\n              minLeft: -offsetLeft,\n              maxTop: document.documentElement.clientHeight - element.clientHeight - offsetTop,\n              minTop: -offsetTop\n            };\n            moveDelegate = moveElementBounded;\n          } else {\n            bounds = null;\n            moveDelegate = moveElement;\n          }\n\n          // allow custom `onmove` method\n          dispatchEvent('onmove', instance);\n          refreshTop = !instance.isModal() && instance.isPinned();\n          movable = instance;\n          moveDelegate(eventSrc, element);\n          addClass(document.body, classes.noSelection);\n          return false;\n        }\n      }\n    }\n\n    /**\r\n     * The actual move handler,  attached to document.body mousemove event.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function move(event) {\n      if (movable) {\n        var eventSrc;\n        if (event.type === 'touchmove') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n        if (eventSrc) {\n          moveDelegate(eventSrc, movable.elements.dialog);\n        }\n      }\n    }\n\n    /**\r\n     * Triggers the end of a move event,  attached to document.body mouseup event.\r\n     * Removes no-selection class from document.body, allowing selection.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function endMove() {\n      if (movable) {\n        var instance = movable;\n        movable = bounds = null;\n        removeClass(document.body, classes.noSelection);\n        removeClass(instance.elements.dialog, classes.capture);\n        // allow custom `onmoved` method\n        dispatchEvent('onmoved', instance);\n      }\n    }\n\n    /**\r\n     * Resets any changes made by moving the element to its original state,\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function resetMove(instance) {\n      movable = null;\n      var element = instance.elements.dialog;\n      element.style.left = element.style.top = '';\n    }\n\n    /**\r\n     * Updates the dialog move behavior.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateMovable(instance) {\n      if (instance.get('movable')) {\n        // add class\n        addClass(instance.elements.root, classes.movable);\n        if (instance.isOpen()) {\n          bindMovableEvents(instance);\n        }\n      } else {\n        //reset\n        resetMove(instance);\n        // remove class\n        removeClass(instance.elements.root, classes.movable);\n        if (instance.isOpen()) {\n          unbindMovableEvents(instance);\n        }\n      }\n    }\n\n    /* Controls moving a dialog around */\n    //holde the current instance being resized\t\t\n    var resizable = null,\n      //holds the staring left offset when resize starts.\n      startingLeft = Number.Nan,\n      //holds the staring width when resize starts.\n      startingWidth = 0,\n      //holds the initial width when resized for the first time.\n      minWidth = 0,\n      //holds the offset of the resize handle.\n      handleOffset = 0;\n\n    /**\r\n     * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n     *\r\n     * @param {Event} event\tDOM mousemove event object.\r\n     * @param {Node} element The element being moved.\r\n     * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function resizeElement(event, element, pageRelative) {\n      //calculate offsets from 0,0\n      var current = element;\n      var offsetLeft = 0;\n      var offsetTop = 0;\n      do {\n        offsetLeft += current.offsetLeft;\n        offsetTop += current.offsetTop;\n      } while (current = current.offsetParent);\n\n      // determine X,Y coordinates.\n      var X, Y;\n      if (pageRelative === true) {\n        X = event.pageX;\n        Y = event.pageY;\n      } else {\n        X = event.clientX;\n        Y = event.clientY;\n      }\n      // rtl handling\n      var isRTL = isRightToLeft();\n      if (isRTL) {\n        // reverse X \n        X = document.body.offsetWidth - X;\n        // if has a starting left, calculate offsetRight\n        if (!isNaN(startingLeft)) {\n          offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\n        }\n      }\n\n      // set width/height\n      element.style.height = Y - offsetTop + handleOffset + 'px';\n      element.style.width = X - offsetLeft + handleOffset + 'px';\n\n      // if the element being resized has a starting left, maintain it.\n      // the dialog is centered, divide by half the offset to maintain the margins.\n      if (!isNaN(startingLeft)) {\n        var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\n        if (isRTL) {\n          //negate the diff, why?\n          //when growing it should decrease left\n          //when shrinking it should increase left\n          diff *= -1;\n        }\n        if (element.offsetWidth > startingWidth) {\n          //growing\n          element.style.left = startingLeft + diff + 'px';\n        } else if (element.offsetWidth >= minWidth) {\n          //shrinking\n          element.style.left = startingLeft - diff + 'px';\n        }\n      }\n    }\n\n    /**\r\n     * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n     * Adds no-selection class to the body, disabling selection while moving.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * @param {Object} instance The dilog instance.\r\n     * \r\n     * @return {Boolean} false\r\n     */\n    function beginResize(event, instance) {\n      if (!instance.isMaximized()) {\n        var eventSrc;\n        if (event.type === 'touchstart') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n        if (eventSrc) {\n          // allow custom `onresize` method\n          dispatchEvent('onresize', instance);\n          resizable = instance;\n          handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\n          var element = instance.elements.dialog;\n          addClass(element, classes.capture);\n          startingLeft = parseInt(element.style.left, 10);\n          element.style.height = element.offsetHeight + 'px';\n          element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\n          element.style.width = (startingWidth = element.offsetWidth) + 'px';\n          if (element.style.maxWidth !== 'none') {\n            element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\n          }\n          element.style.maxWidth = 'none';\n          addClass(document.body, classes.noSelection);\n          return false;\n        }\n      }\n    }\n\n    /**\r\n     * The actual resize handler,  attached to document.body mousemove event.\r\n     *\r\n     * @param {Event} event\tDOM event object.\r\n     * \r\n     * @return {undefined}\r\n     */\n    function resize(event) {\n      if (resizable) {\n        var eventSrc;\n        if (event.type === 'touchmove') {\n          event.preventDefault();\n          eventSrc = event.targetTouches[0];\n        } else if (event.button === 0) {\n          eventSrc = event;\n        }\n        if (eventSrc) {\n          resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\n        }\n      }\n    }\n\n    /**\r\n     * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n     * Removes no-selection class from document.body, allowing selection.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function endResize() {\n      if (resizable) {\n        var instance = resizable;\n        resizable = null;\n        removeClass(document.body, classes.noSelection);\n        removeClass(instance.elements.dialog, classes.capture);\n        cancelClick = true;\n        // allow custom `onresized` method\n        dispatchEvent('onresized', instance);\n      }\n    }\n\n    /**\r\n     * Resets any changes made by resizing the element to its original state.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function resetResize(instance) {\n      resizable = null;\n      var element = instance.elements.dialog;\n      if (element.style.maxWidth === 'none') {\n        //clear inline styles.\n        element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\n        //reset variables.\n        startingLeft = Number.Nan;\n        startingWidth = minWidth = handleOffset = 0;\n      }\n    }\n\n    /**\r\n     * Updates the dialog move behavior.\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function updateResizable(instance) {\n      if (instance.get('resizable')) {\n        // add class\n        addClass(instance.elements.root, classes.resizable);\n        if (instance.isOpen()) {\n          bindResizableEvents(instance);\n        }\n      } else {\n        //reset\n        resetResize(instance);\n        // remove class\n        removeClass(instance.elements.root, classes.resizable);\n        if (instance.isOpen()) {\n          unbindResizableEvents(instance);\n        }\n      }\n    }\n\n    /**\r\n     * Reset move/resize on window resize.\r\n     *\r\n     * @param {Event} event\twindow resize event object.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function windowResize( /*event*/\n    ) {\n      for (var x = 0; x < openDialogs.length; x += 1) {\n        var instance = openDialogs[x];\n        if (instance.get('autoReset')) {\n          resetMove(instance);\n          resetResize(instance);\n        }\n      }\n    }\n    /**\r\n     * Bind dialogs events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindEvents(instance) {\n      // if first dialog, hook global handlers\n      if (openDialogs.length === 1) {\n        //global\n        on(window, 'resize', windowResize);\n        on(document.body, 'keyup', keyupHandler);\n        on(document.body, 'keydown', keydownHandler);\n        on(document.body, 'focus', onReset);\n\n        //move\n        on(document.documentElement, 'mousemove', move);\n        on(document.documentElement, 'touchmove', move, false, false);\n        on(document.documentElement, 'mouseup', endMove);\n        on(document.documentElement, 'touchend', endMove);\n        //resize\n        on(document.documentElement, 'mousemove', resize);\n        on(document.documentElement, 'touchmove', resize, false, false);\n        on(document.documentElement, 'mouseup', endResize);\n        on(document.documentElement, 'touchend', endResize);\n      }\n\n      // common events\n      on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\n      on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\n      on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\n      on(instance.elements.reset[0], 'keydown', recycleTab);\n      on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\n\n      //prevent handling key up when dialog is being opened by a key stroke.\n      cancelKeyup = true;\n      // hook in transition handler\n      on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\n\n      // modelss only events\n      if (!instance.get('modal')) {\n        bindModelessEvents(instance);\n      }\n\n      // resizable\n      if (instance.get('resizable')) {\n        bindResizableEvents(instance);\n      }\n\n      // movable\n      if (instance.get('movable')) {\n        bindMovableEvents(instance);\n      }\n    }\n\n    /**\r\n     * Unbind dialogs events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindEvents(instance) {\n      // if last dialog, remove global handlers\n      if (openDialogs.length === 1) {\n        //global\n        off(window, 'resize', windowResize);\n        off(document.body, 'keyup', keyupHandler);\n        off(document.body, 'keydown', keydownHandler);\n        off(document.body, 'focus', onReset);\n        //move\n        off(document.documentElement, 'mousemove', move);\n        off(document.documentElement, 'mouseup', endMove);\n        //resize\n        off(document.documentElement, 'mousemove', resize);\n        off(document.documentElement, 'mouseup', endResize);\n      }\n\n      // common events\n      off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\n      off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\n      off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\n      off(instance.elements.reset[0], 'keydown', recycleTab);\n      off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\n\n      // hook out transition handler\n      on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\n\n      // modelss only events\n      if (!instance.get('modal')) {\n        unbindModelessEvents(instance);\n      }\n\n      // movable\n      if (instance.get('movable')) {\n        unbindMovableEvents(instance);\n      }\n\n      // resizable\n      if (instance.get('resizable')) {\n        unbindResizableEvents(instance);\n      }\n    }\n\n    /**\r\n     * Bind modeless specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindModelessEvents(instance) {\n      on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\n    }\n\n    /**\r\n     * Unbind modeless specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindModelessEvents(instance) {\n      off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\n    }\n\n    /**\r\n     * Bind movable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindMovableEvents(instance) {\n      on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\n      on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\n    }\n\n    /**\r\n     * Unbind movable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindMovableEvents(instance) {\n      off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\n      off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\n    }\n\n    /**\r\n     * Bind resizable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindResizableEvents(instance) {\n      on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\n      on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\n    }\n\n    /**\r\n     * Unbind resizable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindResizableEvents(instance) {\n      off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\n      off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\n    }\n\n    /**\r\n     * Bind closable events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function bindClosableEvents(instance) {\n      on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\n    }\n\n    /**\r\n     * Unbind closable specific events\r\n     *\r\n     * @param {Object} instance The dilog instance.\r\n     *\r\n     * @return {undefined}\r\n     */\n    function unbindClosableEvents(instance) {\n      off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\n    }\n    // dialog API\n    return {\n      __init: initialize,\n      /**\r\n       * Check if dialog is currently open\r\n       *\r\n       * @return {Boolean}\r\n       */\n      isOpen: function () {\n        return this.__internal.isOpen;\n      },\n      isModal: function () {\n        return this.elements.root.className.indexOf(classes.modeless) < 0;\n      },\n      isMaximized: function () {\n        return this.elements.root.className.indexOf(classes.maximized) > -1;\n      },\n      isPinned: function () {\n        return this.elements.root.className.indexOf(classes.unpinned) < 0;\n      },\n      maximize: function () {\n        if (!this.isMaximized()) {\n          maximize(this);\n        }\n        return this;\n      },\n      restore: function () {\n        if (this.isMaximized()) {\n          restore(this);\n        }\n        return this;\n      },\n      pin: function () {\n        if (!this.isPinned()) {\n          pin(this);\n        }\n        return this;\n      },\n      unpin: function () {\n        if (this.isPinned()) {\n          unpin(this);\n        }\n        return this;\n      },\n      bringToFront: function () {\n        bringToFront(null, this);\n        return this;\n      },\n      /**\r\n       * Move the dialog to a specific x/y coordinates\r\n       *\r\n       * @param {Number} x    The new dialog x coordinate in pixels.\r\n       * @param {Number} y    The new dialog y coordinate in pixels.\r\n       *\r\n       * @return {Object} The dialog instance.\r\n       */\n      moveTo: function (x, y) {\n        if (!isNaN(x) && !isNaN(y)) {\n          // allow custom `onmove` method\n          dispatchEvent('onmove', this);\n          var element = this.elements.dialog,\n            current = element,\n            offsetLeft = 0,\n            offsetTop = 0;\n\n          //subtract existing left,top\n          if (element.style.left) {\n            offsetLeft -= parseInt(element.style.left, 10);\n          }\n          if (element.style.top) {\n            offsetTop -= parseInt(element.style.top, 10);\n          }\n          //calc offset\n          do {\n            offsetLeft += current.offsetLeft;\n            offsetTop += current.offsetTop;\n          } while (current = current.offsetParent);\n\n          //calc left, top\n          var left = x - offsetLeft;\n          var top = y - offsetTop;\n\n          //// rtl handling\n          if (isRightToLeft()) {\n            left *= -1;\n          }\n          element.style.left = left + 'px';\n          element.style.top = top + 'px';\n\n          // allow custom `onmoved` method\n          dispatchEvent('onmoved', this);\n        }\n        return this;\n      },\n      /**\r\n       * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n       * The dialog can be resized to:\r\n       *  A minimum width equal to the initial display width\r\n       *  A minimum height equal to the sum of header/footer heights.\r\n       *\r\n       *\r\n       * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n       * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n       *\r\n       * @return {Object} The dialog instance.\r\n       */\n      resizeTo: function (width, height) {\n        var w = parseFloat(width),\n          h = parseFloat(height),\n          regex = /(\\d*\\.\\d+|\\d+)%/;\n        if (!isNaN(w) && !isNaN(h) && this.get('resizable') === true) {\n          // allow custom `onresize` method\n          dispatchEvent('onresize', this);\n          if (('' + width).match(regex)) {\n            w = w / 100 * document.documentElement.clientWidth;\n          }\n          if (('' + height).match(regex)) {\n            h = h / 100 * document.documentElement.clientHeight;\n          }\n          var element = this.elements.dialog;\n          if (element.style.maxWidth !== 'none') {\n            element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\n          }\n          element.style.maxWidth = 'none';\n          element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\n          element.style.width = w + 'px';\n          element.style.height = h + 'px';\n\n          // allow custom `onresized` method\n          dispatchEvent('onresized', this);\n        }\n        return this;\n      },\n      /**\r\n       * Gets or Sets dialog settings/options \r\n       *\r\n       * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n       * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n       *\r\n       * @return {undefined}\r\n       */\n      setting: function (key, value) {\n        var self = this;\n        var result = update(this, this.__internal.options, function (k, o, n) {\n          optionUpdated(self, k, o, n);\n        }, key, value);\n        if (result.op === 'get') {\n          if (result.found) {\n            return result.value;\n          } else if (typeof this.settings !== 'undefined') {\n            return update(this, this.settings, this.settingUpdated || function () {}, key, value).value;\n          } else {\n            return undefined;\n          }\n        } else if (result.op === 'set') {\n          if (result.items.length > 0) {\n            var callback = this.settingUpdated || function () {};\n            for (var x = 0; x < result.items.length; x += 1) {\n              var item = result.items[x];\n              if (!item.found && typeof this.settings !== 'undefined') {\n                update(this, this.settings, callback, item.key, item.value);\n              }\n            }\n          }\n          return this;\n        }\n      },\n      /**\r\n       * [Alias] Sets dialog settings/options \r\n       */\n      set: function (key, value) {\n        this.setting(key, value);\n        return this;\n      },\n      /**\r\n       * [Alias] Gets dialog settings/options \r\n       */\n      get: function (key) {\n        return this.setting(key);\n      },\n      /**\r\n      * Sets dialog header\r\n      * @content {string or element}\r\n      *\r\n      * @return {undefined}\r\n      */\n      setHeader: function (content) {\n        if (typeof content === 'string') {\n          clearContents(this.elements.header);\n          this.elements.header.innerHTML = content;\n        } else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content) {\n          clearContents(this.elements.header);\n          this.elements.header.appendChild(content);\n        }\n        return this;\n      },\n      /**\r\n      * Sets dialog contents\r\n      * @content {string or element}\r\n      *\r\n      * @return {undefined}\r\n      */\n      setContent: function (content) {\n        if (typeof content === 'string') {\n          clearContents(this.elements.content);\n          this.elements.content.innerHTML = content;\n        } else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content) {\n          clearContents(this.elements.content);\n          this.elements.content.appendChild(content);\n        }\n        return this;\n      },\n      /**\r\n       * Show the dialog as modal\r\n       *\r\n       * @return {Object} the dialog instance.\r\n       */\n      showModal: function (className) {\n        return this.show(true, className);\n      },\n      /**\r\n       * Show the dialog\r\n       *\r\n       * @return {Object} the dialog instance.\r\n       */\n      show: function (modal, className) {\n        // ensure initialization\n        initialize(this);\n        if (!this.__internal.isOpen) {\n          // add to open dialogs\n          this.__internal.isOpen = true;\n          openDialogs.push(this);\n\n          // save last focused element\n          if (alertify.defaults.maintainFocus) {\n            this.__internal.activeElement = document.activeElement;\n          }\n\n          // set tabindex attribute on body element this allows script to give it focusable\n          if (!document.body.hasAttribute('tabindex')) {\n            document.body.setAttribute('tabindex', tabindex = '0');\n          }\n\n          //allow custom dom manipulation updates before showing the dialog.\n          if (typeof this.prepare === 'function') {\n            this.prepare();\n          }\n          bindEvents(this);\n          if (modal !== undefined) {\n            this.set('modal', modal);\n          }\n\n          //save scroll to prevent document jump\n          saveScrollPosition();\n          ensureNoOverflow();\n\n          // allow custom dialog class on show\n          if (typeof className === 'string' && className !== '') {\n            this.__internal.className = className;\n            addClass(this.elements.root, className);\n          }\n\n          // maximize if start maximized\n          if (this.get('startMaximized')) {\n            this.maximize();\n          } else if (this.isMaximized()) {\n            restore(this);\n          }\n          updateAbsPositionFix(this);\n          this.elements.root.removeAttribute('style');\n          removeClass(this.elements.root, classes.animationOut);\n          addClass(this.elements.root, classes.animationIn);\n\n          // set 1s fallback in case transition event doesn't fire\n          clearTimeout(this.__internal.timerIn);\n          this.__internal.timerIn = setTimeout(this.__internal.transitionInHandler, transition.supported ? 1000 : 100);\n          if (isSafari) {\n            // force desktop safari reflow\n            var root = this.elements.root;\n            root.style.display = 'none';\n            setTimeout(function () {\n              root.style.display = 'block';\n            }, 0);\n          }\n\n          //reflow\n          reflow = this.elements.root.offsetWidth;\n\n          // show dialog\n          removeClass(this.elements.root, classes.hidden);\n\n          //restore scroll to prevent document jump\n          restoreScrollPosition();\n\n          // internal on show event\n          if (typeof this.hooks.onshow === 'function') {\n            this.hooks.onshow.call(this);\n          }\n\n          // allow custom `onshow` method\n          dispatchEvent('onshow', this);\n        } else {\n          // reset move updates\n          resetMove(this);\n          // reset resize updates\n          resetResize(this);\n          // shake the dialog to indicate its already open\n          addClass(this.elements.dialog, classes.shake);\n          var self = this;\n          setTimeout(function () {\n            removeClass(self.elements.dialog, classes.shake);\n          }, 200);\n        }\n        return this;\n      },\n      /**\r\n       * Close the dialog\r\n       *\r\n       * @return {Object} The dialog instance\r\n       */\n      close: function () {\n        if (this.__internal.isOpen) {\n          // custom `onclosing` event\n          if (dispatchEvent('onclosing', this) !== false) {\n            unbindEvents(this);\n            removeClass(this.elements.root, classes.animationIn);\n            addClass(this.elements.root, classes.animationOut);\n\n            // set 1s fallback in case transition event doesn't fire\n            clearTimeout(this.__internal.timerOut);\n            this.__internal.timerOut = setTimeout(this.__internal.transitionOutHandler, transition.supported ? 1000 : 100);\n            // hide dialog\n            addClass(this.elements.root, classes.hidden);\n            //reflow\n            reflow = this.elements.modal.offsetWidth;\n\n            // return focus to the last active element\n            if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\n              this.__internal.activeElement.focus();\n              this.__internal.activeElement = null;\n            }\n\n            // remove custom dialog class on hide\n            if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\n              removeClass(this.elements.root, this.__internal.className);\n            }\n\n            // internal on close event\n            if (typeof this.hooks.onclose === 'function') {\n              this.hooks.onclose.call(this);\n            }\n\n            // allow custom `onclose` method\n            dispatchEvent('onclose', this);\n\n            //remove from open dialogs\n            openDialogs.splice(openDialogs.indexOf(this), 1);\n            this.__internal.isOpen = false;\n            ensureNoOverflow();\n          }\n        }\n        // last dialog and tab index was set by us, remove it.\n        if (!openDialogs.length && tabindex === '0') {\n          document.body.removeAttribute('tabindex');\n        }\n        return this;\n      },\n      /**\r\n       * Close all open dialogs except this.\r\n       *\r\n       * @return {undefined}\r\n       */\n      closeOthers: function () {\n        alertify.closeAll(this);\n        return this;\n      },\n      /**\r\n       * Destroys this dialog instance\r\n       *\r\n       * @return {undefined}\r\n       */\n      destroy: function () {\n        if (this.__internal) {\n          if (this.__internal.isOpen) {\n            //mark dialog for destruction, this will be called on tranistionOut event.\n            this.__internal.destroy = function () {\n              destruct(this, initialize);\n            };\n            //close the dialog to unbind all events.\n            this.close();\n          } else if (!this.__internal.destroy) {\n            destruct(this, initialize);\n          }\n        }\n        return this;\n      }\n    };\n  }();\n  var notifier = function () {\n    var reflow,\n      element,\n      openInstances = [],\n      classes = defaults.notifier.classes,\n      baseClass = classes.base;\n    /**\r\n     * Helper: initializes the notifier instance\r\n     *\r\n     */\n    function initialize(instance) {\n      if (!instance.__internal) {\n        instance.__internal = {\n          position: alertify.defaults.notifier.position,\n          delay: alertify.defaults.notifier.delay\n        };\n        element = document.createElement('DIV');\n        var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\n        if (transitionOff) {\n          baseClass = classes.base + ' ajs-no-transition';\n        }\n        updatePosition(instance);\n      }\n\n      //add to DOM tree.\n      if (element.parentNode !== document.body) {\n        document.body.appendChild(element);\n      }\n    }\n    function pushInstance(instance) {\n      instance.__internal.pushed = true;\n      openInstances.push(instance);\n    }\n    function popInstance(instance) {\n      openInstances.splice(openInstances.indexOf(instance), 1);\n      instance.__internal.pushed = false;\n    }\n    /**\r\n     * Helper: update the notifier instance position\r\n     *\r\n     */\n    function updatePosition(instance) {\n      element.className = baseClass;\n      switch (instance.__internal.position) {\n        case 'top-right':\n          addClass(element, classes.top + ' ' + classes.right);\n          break;\n        case 'top-left':\n          addClass(element, classes.top + ' ' + classes.left);\n          break;\n        case 'top-center':\n          addClass(element, classes.top + ' ' + classes.center);\n          break;\n        case 'bottom-left':\n          addClass(element, classes.bottom + ' ' + classes.left);\n          break;\n        case 'bottom-center':\n          addClass(element, classes.bottom + ' ' + classes.center);\n          break;\n        default:\n        case 'bottom-right':\n          addClass(element, classes.bottom + ' ' + classes.right);\n          break;\n      }\n    }\n\n    /**\r\n    * creates a new notification message\r\n    *\r\n    * @param  {DOMElement} message\tThe notifier message element\r\n    * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n    * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n    *\r\n    * @return {undefined}\r\n    */\n    function create(div, callback) {\n      function clickDelegate(event, instance) {\n        if (!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true') {\n          instance.dismiss(true);\n        }\n      }\n      function transitionDone(event, instance) {\n        // unbind event\n        off(instance.element, transition.type, transitionDone);\n        // remove the message\n        element.removeChild(instance.element);\n      }\n      function initialize(instance) {\n        if (!instance.__internal) {\n          instance.__internal = {\n            pushed: false,\n            delay: undefined,\n            timer: undefined,\n            clickHandler: undefined,\n            transitionEndHandler: undefined,\n            transitionTimeout: undefined\n          };\n          instance.__internal.clickHandler = delegate(instance, clickDelegate);\n          instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\n        }\n        return instance;\n      }\n      function clearTimers(instance) {\n        clearTimeout(instance.__internal.timer);\n        clearTimeout(instance.__internal.transitionTimeout);\n      }\n      return initialize({\n        /* notification DOM element*/\n        element: div,\n        /*\r\n         * Pushes a notification message\r\n         * @param {string or DOMElement} content The notification message content\r\n         * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n         *\r\n         */\n        push: function (_content, _wait) {\n          if (!this.__internal.pushed) {\n            pushInstance(this);\n            clearTimers(this);\n            var content, wait;\n            switch (arguments.length) {\n              case 0:\n                wait = this.__internal.delay;\n                break;\n              case 1:\n                if (typeof _content === 'number') {\n                  wait = _content;\n                } else {\n                  content = _content;\n                  wait = this.__internal.delay;\n                }\n                break;\n              case 2:\n                content = _content;\n                wait = _wait;\n                break;\n            }\n            this.__internal.closeButton = alertify.defaults.notifier.closeButton;\n            // set contents\n            if (typeof content !== 'undefined') {\n              this.setContent(content);\n            }\n            // append or insert\n            if (notifier.__internal.position.indexOf('top') < 0) {\n              element.appendChild(this.element);\n            } else {\n              element.insertBefore(this.element, element.firstChild);\n            }\n            reflow = this.element.offsetWidth;\n            addClass(this.element, classes.visible);\n            // attach click event\n            on(this.element, 'click', this.__internal.clickHandler);\n            return this.delay(wait);\n          }\n          return this;\n        },\n        /*\r\n         * {Function} callback function to be invoked before dismissing the notification message.\r\n         * Remarks: A return value === 'false' will cancel the dismissal\r\n         *\r\n         */\n        ondismiss: function () {},\n        /*\r\n         * {Function} callback function to be invoked when the message is dismissed.\r\n         *\r\n         */\n        callback: callback,\n        /*\r\n         * Dismisses the notification message\r\n         * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n         *\r\n         */\n        dismiss: function (clicked) {\n          if (this.__internal.pushed) {\n            clearTimers(this);\n            if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\n              //detach click event\n              off(this.element, 'click', this.__internal.clickHandler);\n              // ensure element exists\n              if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\n                //transition end or fallback\n                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\n                removeClass(this.element, classes.visible);\n\n                // custom callback on dismiss\n                if (typeof this.callback === 'function') {\n                  this.callback.call(this, clicked);\n                }\n              }\n              popInstance(this);\n            }\n          }\n          return this;\n        },\n        /*\r\n         * Delays the notification message dismissal\r\n         * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n         *\r\n         */\n        delay: function (wait) {\n          clearTimers(this);\n          this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\n          if (this.__internal.delay > 0) {\n            var self = this;\n            this.__internal.timer = setTimeout(function () {\n              self.dismiss();\n            }, this.__internal.delay * 1000);\n          }\n          return this;\n        },\n        /*\r\n         * Sets the notification message contents\r\n         * @param {string or DOMElement} content The notification message content\r\n         *\r\n         */\n        setContent: function (content) {\n          if (typeof content === 'string') {\n            clearContents(this.element);\n            this.element.innerHTML = content;\n          } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\n            clearContents(this.element);\n            this.element.appendChild(content);\n          }\n          if (this.__internal.closeButton) {\n            var close = document.createElement('span');\n            addClass(close, classes.close);\n            close.setAttribute('data-close', true);\n            this.element.appendChild(close);\n          }\n          return this;\n        },\n        /*\r\n         * Dismisses all open notifications except this.\r\n         *\r\n         */\n        dismissOthers: function () {\n          notifier.dismissAll(this);\n          return this;\n        }\n      });\n    }\n\n    //notifier api\n    return {\n      /**\r\n       * Gets or Sets notifier settings.\r\n       *\r\n       * @param {string} key The setting name\r\n       * @param {Variant} value The setting value.\r\n       *\r\n       * @return {Object}\tif the called as a setter, return the notifier instance.\r\n       */\n      setting: function (key, value) {\n        //ensure init\n        initialize(this);\n        if (typeof value === 'undefined') {\n          //get\n          return this.__internal[key];\n        } else {\n          //set\n          switch (key) {\n            case 'position':\n              this.__internal.position = value;\n              updatePosition(this);\n              break;\n            case 'delay':\n              this.__internal.delay = value;\n              break;\n          }\n        }\n        return this;\n      },\n      /**\r\n       * [Alias] Sets dialog settings/options\r\n       */\n      set: function (key, value) {\n        this.setting(key, value);\n        return this;\n      },\n      /**\r\n       * [Alias] Gets dialog settings/options\r\n       */\n      get: function (key) {\n        return this.setting(key);\n      },\n      /**\r\n       * Creates a new notification message\r\n       *\r\n       * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n       * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n       *\r\n       * @return {undefined}\r\n       */\n      create: function (type, callback) {\n        //ensure notifier init\n        initialize(this);\n        //create new notification message\n        var div = document.createElement('div');\n        div.className = classes.message + (typeof type === 'string' && type !== '' ? ' ' + classes.prefix + type : '');\n        return create(div, callback);\n      },\n      /**\r\n       * Dismisses all open notifications.\r\n       *\r\n       * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n       *\r\n       */\n      dismissAll: function (except) {\n        var clone = openInstances.slice(0);\n        for (var x = 0; x < clone.length; x += 1) {\n          var instance = clone[x];\n          if (except === undefined || except !== instance) {\n            instance.dismiss();\n          }\n        }\n      }\n    };\n  }();\n\n  /**\r\n   * Alertify public API\r\n   * This contains everything that is exposed through the alertify object.\r\n   *\r\n   * @return {Object}\r\n   */\n  function Alertify() {\n    // holds a references of created dialogs\n    var dialogs = {};\n\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\n    function extend(sub, base) {\n      // copy dialog pototype over definition.\n      for (var prop in base) {\n        if (base.hasOwnProperty(prop)) {\n          sub[prop] = base[prop];\n        }\n      }\n      return sub;\n    }\n\n    /**\r\n    * Helper: returns a dialog instance from saved dialogs.\r\n    * and initializes the dialog if its not already initialized.\r\n    *\r\n    * @name {String} name The dialog name.\r\n    *\r\n    * @return {Object} The dialog instance.\r\n    */\n    function get_dialog(name) {\n      var dialog = dialogs[name].dialog;\n      //initialize the dialog if its not already initialized.\n      if (dialog && typeof dialog.__init === 'function') {\n        dialog.__init(dialog);\n      }\n      return dialog;\n    }\n\n    /**\r\n     * Helper:  registers a new dialog definition.\r\n     *\r\n     * @name {String} name The dialog name.\r\n     * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n     * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n     * @base {String} base the name of another dialog to inherit from.\r\n     *\r\n     * @return {Object} The dialog definition.\r\n     */\n    function register(name, Factory, transient, base) {\n      var definition = {\n        dialog: null,\n        factory: Factory\n      };\n\n      //if this is based on an existing dialog, create a new definition\n      //by applying the new protoype over the existing one.\n      if (base !== undefined) {\n        definition.factory = function () {\n          return extend(new dialogs[base].factory(), new Factory());\n        };\n      }\n      if (!transient) {\n        //create a new definition based on dialog\n        definition.dialog = extend(new definition.factory(), dialog);\n      }\n      return dialogs[name] = definition;\n    }\n    return {\n      /**\r\n       * Alertify defaults\r\n       * \r\n       * @type {Object}\r\n       */\n      defaults: defaults,\n      /**\r\n       * Dialogs factory \r\n       *\r\n       * @param {string}      Dialog name.\r\n       * @param {Function}    A Dialog factory function.\r\n       * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n       * @param {String}      The name of the base type to inherit from.\r\n       */\n      dialog: function (name, Factory, transient, base) {\n        // get request, create a new instance and return it.\n        if (typeof Factory !== 'function') {\n          return get_dialog(name);\n        }\n        if (this.hasOwnProperty(name)) {\n          throw new Error('alertify.dialog: name already exists');\n        }\n\n        // register the dialog\n        var definition = register(name, Factory, transient, base);\n        if (transient) {\n          // make it public\n          this[name] = function () {\n            //if passed with no params, consider it a get request\n            if (arguments.length === 0) {\n              return definition.dialog;\n            } else {\n              var instance = extend(new definition.factory(), dialog);\n              //ensure init\n              if (instance && typeof instance.__init === 'function') {\n                instance.__init(instance);\n              }\n              instance['main'].apply(instance, arguments);\n              return instance['show'].apply(instance);\n            }\n          };\n        } else {\n          // make it public\n          this[name] = function () {\n            //ensure init\n            if (definition.dialog && typeof definition.dialog.__init === 'function') {\n              definition.dialog.__init(definition.dialog);\n            }\n            //if passed with no params, consider it a get request\n            if (arguments.length === 0) {\n              return definition.dialog;\n            } else {\n              var dialog = definition.dialog;\n              dialog['main'].apply(definition.dialog, arguments);\n              return dialog['show'].apply(definition.dialog);\n            }\n          };\n        }\n      },\n      /**\r\n       * Close all open dialogs.\r\n       *\r\n       * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n       *\r\n       * @return {undefined}\r\n       */\n      closeAll: function (except) {\n        var clone = openDialogs.slice(0);\n        for (var x = 0; x < clone.length; x += 1) {\n          var instance = clone[x];\n          if (except === undefined || except !== instance) {\n            instance.close();\n          }\n        }\n      },\n      /**\r\n       * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n       *\r\n       * @param {string} name The dialog name.\r\n       * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n       * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n       *\r\n       * @return {undefined}\r\n       */\n      setting: function (name, key, value) {\n        if (name === 'notifier') {\n          return notifier.setting(key, value);\n        }\n        var dialog = get_dialog(name);\n        if (dialog) {\n          return dialog.setting(key, value);\n        }\n      },\n      /**\r\n       * [Alias] Sets dialog settings/options \r\n       */\n      set: function (name, key, value) {\n        return this.setting(name, key, value);\n      },\n      /**\r\n       * [Alias] Gets dialog settings/options \r\n       */\n      get: function (name, key) {\n        return this.setting(name, key);\n      },\n      /**\r\n       * Creates a new notification message.\r\n       * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n       * This allows for custom look and feel for various types of notifications.\r\n       *\r\n       * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n       * @param  {String}                 [type='']\t\t\t\tType of log message\r\n       * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      notify: function (message, type, wait, callback) {\n        return notifier.create(type, callback).push(message, wait);\n      },\n      /**\r\n       * Creates a new notification message.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      message: function (message, wait, callback) {\n        return notifier.create(null, callback).push(message, wait);\n      },\n      /**\r\n       * Creates a new notification message of type 'success'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      success: function (message, wait, callback) {\n        return notifier.create('success', callback).push(message, wait);\n      },\n      /**\r\n       * Creates a new notification message of type 'error'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      error: function (message, wait, callback) {\n        return notifier.create('error', callback).push(message, wait);\n      },\n      /**\r\n       * Creates a new notification message of type 'warning'.\r\n       *\r\n       * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n       * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n       * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n       *\r\n       * @return {Object} Notification object.\r\n       */\n      warning: function (message, wait, callback) {\n        return notifier.create('warning', callback).push(message, wait);\n      },\n      /**\r\n       * Dismisses all open notifications\r\n       *\r\n       * @return {undefined}\r\n       */\n      dismissAll: function () {\n        notifier.dismissAll();\n      }\n    };\n  }\n  var alertify = new Alertify();\n\n  /**\r\n  * Alert dialog definition\r\n  *\r\n  * invoked by:\r\n  *\talertify.alert(message);\r\n  *\talertify.alert(title, message);\r\n  *\talertify.alert(message, onok);\r\n  *\talertify.alert(title, message, onok);\r\n   */\n  alertify.dialog('alert', function () {\n    return {\n      main: function (_title, _message, _onok) {\n        var title, message, onok;\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n          case 2:\n            if (typeof _message === 'function') {\n              message = _title;\n              onok = _message;\n            } else {\n              title = _title;\n              message = _message;\n            }\n            break;\n          case 3:\n            title = _title;\n            message = _message;\n            onok = _onok;\n            break;\n        }\n        this.set('title', title);\n        this.set('message', message);\n        this.set('onok', onok);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.ok\n          }],\n          focus: {\n            element: 0,\n            select: false\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {\n        // nothing\n      },\n      prepare: function () {\n        //nothing\n      },\n      setMessage: function (message) {\n        this.setContent(message);\n      },\n      settings: {\n        message: undefined,\n        onok: undefined,\n        label: undefined\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n          case 'label':\n            if (this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].element.innerHTML = newValue;\n            }\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        if (typeof this.get('onok') === 'function') {\n          var returnValue = this.get('onok').call(this, closeEvent);\n          if (typeof returnValue !== 'undefined') {\n            closeEvent.cancel = !returnValue;\n          }\n        }\n      }\n    };\n  });\n  /**\r\n   * Confirm dialog object\r\n   *\r\n   *\talertify.confirm(message);\r\n   *\talertify.confirm(message, onok);\r\n   *\talertify.confirm(message, onok, oncancel);\r\n   *\talertify.confirm(title, message, onok, oncancel);\r\n   */\n  alertify.dialog('confirm', function () {\n    var autoConfirm = {\n      timer: null,\n      index: null,\n      text: null,\n      duration: null,\n      task: function (event, self) {\n        if (self.isOpen()) {\n          self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\n          autoConfirm.duration -= 1;\n          if (autoConfirm.duration === -1) {\n            clearAutoConfirm(self);\n            var button = self.__internal.buttons[autoConfirm.index];\n            var closeEvent = createCloseEvent(autoConfirm.index, button);\n            if (typeof self.callback === 'function') {\n              self.callback.apply(self, [closeEvent]);\n            }\n            //close the dialog.\n            if (closeEvent.close !== false) {\n              self.close();\n            }\n          }\n        } else {\n          clearAutoConfirm(self);\n        }\n      }\n    };\n    function clearAutoConfirm(self) {\n      if (autoConfirm.timer !== null) {\n        clearInterval(autoConfirm.timer);\n        autoConfirm.timer = null;\n        self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\n      }\n    }\n    function startAutoConfirm(self, index, duration) {\n      clearAutoConfirm(self);\n      autoConfirm.duration = duration;\n      autoConfirm.index = index;\n      autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\n      autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\n      autoConfirm.task(null, self);\n    }\n    return {\n      main: function (_title, _message, _onok, _oncancel) {\n        var title, message, onok, oncancel;\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n          case 2:\n            message = _title;\n            onok = _message;\n            break;\n          case 3:\n            message = _title;\n            onok = _message;\n            oncancel = _onok;\n            break;\n          case 4:\n            title = _title;\n            message = _message;\n            onok = _onok;\n            oncancel = _oncancel;\n            break;\n        }\n        this.set('title', title);\n        this.set('message', message);\n        this.set('onok', onok);\n        this.set('oncancel', oncancel);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ENTER,\n            className: alertify.defaults.theme.ok\n          }, {\n            text: alertify.defaults.glossary.cancel,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.cancel\n          }],\n          focus: {\n            element: 0,\n            select: false\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {\n        //nothing\n      },\n      prepare: function () {\n        //nothing\n      },\n      setMessage: function (message) {\n        this.setContent(message);\n      },\n      settings: {\n        message: null,\n        labels: null,\n        onok: null,\n        oncancel: null,\n        defaultFocus: null,\n        reverseButtons: null\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n          case 'labels':\n            if ('ok' in newValue && this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].text = newValue.ok;\n              this.__internal.buttons[0].element.innerHTML = newValue.ok;\n            }\n            if ('cancel' in newValue && this.__internal.buttons[1].element) {\n              this.__internal.buttons[1].text = newValue.cancel;\n              this.__internal.buttons[1].element.innerHTML = newValue.cancel;\n            }\n            break;\n          case 'reverseButtons':\n            if (newValue === true) {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\n            } else {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\n            }\n            break;\n          case 'defaultFocus':\n            this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        clearAutoConfirm(this);\n        var returnValue;\n        switch (closeEvent.index) {\n          case 0:\n            if (typeof this.get('onok') === 'function') {\n              returnValue = this.get('onok').call(this, closeEvent);\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n            break;\n          case 1:\n            if (typeof this.get('oncancel') === 'function') {\n              returnValue = this.get('oncancel').call(this, closeEvent);\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n            break;\n        }\n      },\n      autoOk: function (duration) {\n        startAutoConfirm(this, 0, duration);\n        return this;\n      },\n      autoCancel: function (duration) {\n        startAutoConfirm(this, 1, duration);\n        return this;\n      }\n    };\n  });\n  /**\r\n   * Prompt dialog object\r\n   *\r\n   * invoked by:\r\n   *\talertify.prompt(message);\r\n   *\talertify.prompt(message, value);\r\n   *\talertify.prompt(message, value, onok);\r\n   *\talertify.prompt(message, value, onok, oncancel);\r\n   *\talertify.prompt(title, message, value, onok, oncancel);\r\n   */\n  alertify.dialog('prompt', function () {\n    var input = document.createElement('INPUT');\n    var p = document.createElement('P');\n    return {\n      main: function (_title, _message, _value, _onok, _oncancel) {\n        var title, message, value, onok, oncancel;\n        switch (arguments.length) {\n          case 1:\n            message = _title;\n            break;\n          case 2:\n            message = _title;\n            value = _message;\n            break;\n          case 3:\n            message = _title;\n            value = _message;\n            onok = _value;\n            break;\n          case 4:\n            message = _title;\n            value = _message;\n            onok = _value;\n            oncancel = _onok;\n            break;\n          case 5:\n            title = _title;\n            message = _message;\n            value = _value;\n            onok = _onok;\n            oncancel = _oncancel;\n            break;\n        }\n        this.set('title', title);\n        this.set('message', message);\n        this.set('value', value);\n        this.set('onok', onok);\n        this.set('oncancel', oncancel);\n        return this;\n      },\n      setup: function () {\n        return {\n          buttons: [{\n            text: alertify.defaults.glossary.ok,\n            key: keys.ENTER,\n            className: alertify.defaults.theme.ok\n          }, {\n            text: alertify.defaults.glossary.cancel,\n            key: keys.ESC,\n            invokeOnClose: true,\n            className: alertify.defaults.theme.cancel\n          }],\n          focus: {\n            element: input,\n            select: true\n          },\n          options: {\n            maximizable: false,\n            resizable: false\n          }\n        };\n      },\n      build: function () {\n        input.className = alertify.defaults.theme.input;\n        input.setAttribute('type', 'text');\n        input.value = this.get('value');\n        this.elements.content.appendChild(p);\n        this.elements.content.appendChild(input);\n      },\n      prepare: function () {\n        //nothing\n      },\n      setMessage: function (message) {\n        if (typeof message === 'string') {\n          clearContents(p);\n          p.innerHTML = message;\n        } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\n          clearContents(p);\n          p.appendChild(message);\n        }\n      },\n      settings: {\n        message: undefined,\n        labels: undefined,\n        onok: undefined,\n        oncancel: undefined,\n        value: '',\n        type: 'text',\n        reverseButtons: undefined\n      },\n      settingUpdated: function (key, oldValue, newValue) {\n        switch (key) {\n          case 'message':\n            this.setMessage(newValue);\n            break;\n          case 'value':\n            input.value = newValue;\n            break;\n          case 'type':\n            switch (newValue) {\n              case 'text':\n              case 'color':\n              case 'date':\n              case 'datetime-local':\n              case 'email':\n              case 'month':\n              case 'number':\n              case 'password':\n              case 'search':\n              case 'tel':\n              case 'time':\n              case 'week':\n                input.type = newValue;\n                break;\n              default:\n                input.type = 'text';\n                break;\n            }\n            break;\n          case 'labels':\n            if (newValue.ok && this.__internal.buttons[0].element) {\n              this.__internal.buttons[0].element.innerHTML = newValue.ok;\n            }\n            if (newValue.cancel && this.__internal.buttons[1].element) {\n              this.__internal.buttons[1].element.innerHTML = newValue.cancel;\n            }\n            break;\n          case 'reverseButtons':\n            if (newValue === true) {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\n            } else {\n              this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\n            }\n            break;\n        }\n      },\n      callback: function (closeEvent) {\n        var returnValue;\n        switch (closeEvent.index) {\n          case 0:\n            this.settings.value = input.value;\n            if (typeof this.get('onok') === 'function') {\n              returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n            break;\n          case 1:\n            if (typeof this.get('oncancel') === 'function') {\n              returnValue = this.get('oncancel').call(this, closeEvent);\n              if (typeof returnValue !== 'undefined') {\n                closeEvent.cancel = !returnValue;\n              }\n            }\n            if (!closeEvent.cancel) {\n              input.value = this.settings.value;\n            }\n            break;\n        }\n      }\n    };\n  });\n\n  // CommonJS\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = alertify;\n    // AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return alertify;\n    });\n    // window\n  } else if (!window.alertify) {\n    window.alertify = alertify;\n  }\n})(typeof window !== 'undefined' ? window : this);","map":{"version":3,"names":["window","NOT_DISABLED_NOT_RESET","keys","ENTER","ESC","F1","F12","LEFT","RIGHT","TAB","defaults","autoReset","basic","closable","closableByDimmer","invokeOnCloseOff","frameless","defaultFocusOff","maintainFocus","maximizable","modal","movable","moveBounded","overflow","padding","pinnable","pinned","preventBodyShift","resizable","startMaximized","transition","transitionOff","tabbable","join","notifier","delay","position","closeButton","classes","base","prefix","message","top","right","bottom","left","center","visible","hidden","close","glossary","title","ok","cancel","acccpt","deny","confirm","decline","maximize","restore","theme","input","hooks","preinit","postinit","openDialogs","addClass","element","classNames","className","removeClass","original","split","toBeRemoved","x","length","index","indexOf","splice","isRightToLeft","getComputedStyle","document","body","direction","getScrollTop","documentElement","scrollTop","getScrollLeft","scrollLeft","clearContents","lastChild","removeChild","copy","src","cpy","Array","isArray","push","Date","getTime","RegExp","source","global","ignoreCase","multiline","lastIndex","prop","hasOwnProperty","destruct","instance","initialize","elements","root","parentNode","settings","__settings","__init","__internal","IsPassiveSupported","options","Object","defineProperty","get","addEventListener","removeEventListener","e","on","el","event","fn","useCapture","passive","capture","off","t","type","supported","transitions","style","undefined","delegate","context","method","arguments","args","apply","createCloseEvent","button","dispatchEvent","eventType","call","dialog","usedKeys","reflow","tabindex","isSafari","navigator","userAgent","templates","dimmer","reset","commands","header","content","footer","buttons","primary","auxiliary","resizeHandle","animationIn","animationOut","fixed","maximized","modeless","noSelection","noOverflow","noPadding","pin","shake","unpinned","noTransition","alertify","setup","focus","select","buttonsDefinition","b","ref","i","internal","isOpen","activeElement","timerIn","timerOut","onshow","onclosing","onclose","onfocus","onmove","onmoved","onresize","onresized","onmaximize","onmaximized","onrestore","onrestored","resetHandler","beginMoveHandler","beginResizeHandler","bringToFrontHandler","modalClickHandler","buttonsClickHandler","commandsClickHandler","transitionInHandler","transitionOutHandler","destroy","createElement","display","innerHTML","firstChild","container","nextSibling","buttonTemplate","key","cloneNode","text","attrs","setAttribute","scope","appendChild","onReset","beginMove","beginResize","bringToFront","handleTransitionInEvent","handleTransitionOutEvent","opKey","set","build","scrollX","scrollY","saveScrollPosition","restoreScrollPosition","scrollTo","ensureNoOverflow","requiresNoOverflow","isModal","isMaximized","topScroll","add","scrollHeight","clientHeight","updateTransition","value","oldValue","offsetWidth","updateTransitionOff","updateDisplayMode","unbindModelessEvents","updateAbsPositionFix","bindModelessEvents","updateBasicMode","updateFramelessMode","setFocus","optionUpdated","option","newValue","setHeader","updatePinned","updateClosable","updateMaximizable","updatePinnable","updateMovable","updateResizable","onupdate","update","obj","callback","result","op","items","found","old","Error","triggerClose","triggerCallback","invokeOnClose","target","srcElement","isPinned","unpin","addAbsPositionFix","marginTop","marginLeft","marginRight","removeAbsPositionFix","parseInt","bindClosableEvents","unbindClosableEvents","cancelClick","modalClickHandlerTS","timeStamp","callbackTS","cancelKeyup","check","now","idx","disabled","closeEvent","keyupHandler","keyCode","keydownHandler","preventDefault","stopPropagation","resetTarget","querySelector","firstReset","lastReset","lastFocusedElement","relatedTarget","within","contains","findTabbable","last","tabbables","slice","querySelectorAll","reverse","offsetParent","offsetHeight","getClientRects","recycleTab","shiftKey","clearTimeout","resetMove","resetResize","offsetX","offsetY","xProp","yProp","bounds","refreshTop","moveDelegate","moveElement","moveElementBounded","Math","min","maxLeft","max","minLeft","maxTop","minTop","eventSrc","targetTouches","current","offsetLeft","offsetTop","move","endMove","bindMovableEvents","unbindMovableEvents","startingLeft","Number","Nan","startingWidth","minWidth","handleOffset","resizeElement","pageRelative","X","Y","pageX","pageY","clientX","clientY","isRTL","isNaN","height","width","diff","abs","minHeight","maxWidth","resize","endResize","bindResizableEvents","unbindResizableEvents","windowResize","bindEvents","unbindEvents","moveTo","y","resizeTo","w","parseFloat","h","regex","match","clientWidth","setting","self","k","o","n","settingUpdated","item","HTMLElement","setContent","showModal","show","hasAttribute","prepare","removeAttribute","setTimeout","closeOthers","closeAll","openInstances","baseClass","updatePosition","pushInstance","pushed","popInstance","create","div","clickDelegate","getAttribute","dismiss","transitionDone","timer","clickHandler","transitionEndHandler","transitionTimeout","clearTimers","_content","_wait","wait","insertBefore","ondismiss","clicked","dismissOthers","dismissAll","except","clone","Alertify","dialogs","extend","sub","get_dialog","name","register","Factory","transient","definition","factory","notify","success","error","warning","main","_title","_message","_onok","onok","setMessage","label","returnValue","autoConfirm","duration","task","clearAutoConfirm","clearInterval","startAutoConfirm","setInterval","_oncancel","oncancel","labels","defaultFocus","reverseButtons","autoOk","autoCancel","p","_value","module","exports","define","amd"],"sources":["D:/FUNiX_Course/4. NodeJs/Assignment 3/Frontend/client/node_modules/alertifyjs/build/alertify.js"],"sourcesContent":["/**\r\n * alertifyjs 1.13.1 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\r\n( function ( window ) {\r\n    'use strict';\r\n    var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\r\n    /**\r\n     * Keys enum\r\n     * @type {Object}\r\n     */\r\n    var keys = {\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        F1: 112,\r\n        F12: 123,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        TAB: 9\r\n    };\r\n    /**\r\n     * Default options \r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        autoReset:true,\r\n        basic:false,\r\n        closable:true,\r\n        closableByDimmer:true,\r\n        invokeOnCloseOff:false,\r\n        frameless:false,\r\n        defaultFocusOff:false,\r\n        maintainFocus:true, //global default not per instance, applies to all dialogs\r\n        maximizable:true,\r\n        modal:true,\r\n        movable:true,\r\n        moveBounded:false,\r\n        overflow:true,\r\n        padding: true,\r\n        pinnable:true,\r\n        pinned:true,\r\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\r\n        resizable:true,\r\n        startMaximized:false,\r\n        transition:'pulse',\r\n        transitionOff:false,\r\n        tabbable:['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])'+NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET+','),//global\r\n        notifier:{\r\n            delay:5,\r\n            position:'bottom-right',\r\n            closeButton:false,\r\n            classes: {\r\n                base: 'alertify-notifier',\r\n                prefix:'ajs-',\r\n                message: 'ajs-message',\r\n                top: 'ajs-top',\r\n                right: 'ajs-right',\r\n                bottom: 'ajs-bottom',\r\n                left: 'ajs-left',\r\n                center: 'ajs-center',\r\n                visible: 'ajs-visible',\r\n                hidden: 'ajs-hidden',\r\n                close: 'ajs-close'\r\n            }\r\n        },\r\n        glossary:{\r\n            title:'AlertifyJS',\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            acccpt: 'Accept',\r\n            deny: 'Deny',\r\n            confirm: 'Confirm',\r\n            decline: 'Decline',\r\n            close: 'Close',\r\n            maximize: 'Maximize',\r\n            restore: 'Restore',\r\n        },\r\n        theme:{\r\n            input:'ajs-input',\r\n            ok:'ajs-ok',\r\n            cancel:'ajs-cancel',\r\n        },\r\n        hooks:{\r\n            preinit:function(){},\r\n            postinit:function(){}\r\n        }\r\n    };\r\n    \r\n    //holds open dialogs instances\r\n    var openDialogs = [];\r\n\r\n    /**\r\n     * [Helper]  Adds the specified class(es) to the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function addClass(element,classNames){\r\n        element.className += ' ' + classNames;\r\n    }\r\n    \r\n    /**\r\n     * [Helper]  Removes the specified class(es) from the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function removeClass(element, classNames) {\r\n        var original = element.className.split(' ');\r\n        var toBeRemoved = classNames.split(' ');\r\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\r\n            var index = original.indexOf(toBeRemoved[x]);\r\n            if (index > -1){\r\n                original.splice(index,1);\r\n            }\r\n        }\r\n        element.className = original.join(' ');\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Checks if the document is RTL\r\n     *\r\n     * @return {Boolean} True if the document is RTL, false otherwise.\r\n     */\r\n    function isRightToLeft(){\r\n        return window.getComputedStyle(document.body).direction === 'rtl';\r\n    }\r\n    /**\r\n     * [Helper]  Get the document current scrollTop\r\n     *\r\n     * @return {Number} current document scrollTop value\r\n     */\r\n    function getScrollTop(){\r\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Get the document current scrollLeft\r\n     *\r\n     * @return {Number} current document scrollLeft value\r\n     */\r\n    function getScrollLeft(){\r\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\r\n    }\r\n\r\n    /**\r\n    * Helper: clear contents\r\n    *\r\n    */\r\n    function clearContents(element){\r\n        while (element.lastChild) {\r\n            element.removeChild(element.lastChild);\r\n        }\r\n    }\r\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\r\n    function copy(src) {\r\n        if(null === src){\r\n            return src;\r\n        }\r\n        var cpy;\r\n        if(Array.isArray(src)){\r\n            cpy = [];\r\n            for(var x=0;x<src.length;x+=1){\r\n                cpy.push(copy(src[x]));\r\n            }\r\n            return cpy;\r\n        }\r\n      \r\n        if(src instanceof Date){\r\n            return new Date(src.getTime());\r\n        }\r\n      \r\n        if(src instanceof RegExp){\r\n            cpy = new RegExp(src.source);\r\n            cpy.global = src.global;\r\n            cpy.ignoreCase = src.ignoreCase;\r\n            cpy.multiline = src.multiline;\r\n            cpy.lastIndex = src.lastIndex;\r\n            return cpy;\r\n        }\r\n        \r\n        if(typeof src === 'object'){\r\n            cpy = {};\r\n            // copy dialog pototype over definition.\r\n            for (var prop in src) {\r\n                if (src.hasOwnProperty(prop)) {\r\n                    cpy[prop] = copy(src[prop]);\r\n                }\r\n            }\r\n            return cpy;\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n      * Helper: destruct the dialog\r\n      *\r\n      */\r\n    function destruct(instance, initialize){\r\n        if(instance.elements){\r\n            //delete the dom and it's references.\r\n            var root = instance.elements.root;\r\n            root.parentNode.removeChild(root);\r\n            delete instance.elements;\r\n            //copy back initial settings.\r\n            instance.settings = copy(instance.__settings);\r\n            //re-reference init function.\r\n            instance.__init = initialize;\r\n            //delete __internal variable to allow re-initialization.\r\n            delete instance.__internal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test to check if passive event listeners are supported.\r\n     */\r\n    var IsPassiveSupported = false;\r\n    try {\r\n        var options = Object.defineProperty({}, 'passive', {\r\n            get: function () {\r\n                IsPassiveSupported = true;\r\n            }\r\n        });\r\n        window.addEventListener('test', options, options);\r\n        window.removeEventListener('test', options, options);\r\n    } catch (e) {}\r\n\r\n     /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n     * @param {string} event The event type to listen for.\r\n     * @param {Function} handler The function to handle the event.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var on = function (el, event, fn, useCapture, passive) {\r\n        el.addEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n     * @param {string} event The event type to remove.\r\n     * @param {Function} fn The event handler to remove.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var off = function (el, event, fn, useCapture, passive) {\r\n        el.removeEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Prevent default event from firing\r\n     *\r\n     * @param  {Event} event Event object\r\n     * @return {undefined}\r\n\r\n    function prevent ( event ) {\r\n        if ( event ) {\r\n            if ( event.preventDefault ) {\r\n                event.preventDefault();\r\n            } else {\r\n                event.returnValue = false;\r\n            }\r\n        }\r\n    }\r\n    */\r\n    var transition = (function () {\r\n        var t, type;\r\n        var supported = false;\r\n        var transitions = {\r\n            'animation'        : 'animationend',\r\n            'OAnimation'       : 'oAnimationEnd oanimationend',\r\n            'msAnimation'      : 'MSAnimationEnd',\r\n            'MozAnimation'     : 'animationend',\r\n            'WebkitAnimation'  : 'webkitAnimationEnd'\r\n        };\r\n\r\n        for (t in transitions) {\r\n            if (document.documentElement.style[t] !== undefined) {\r\n                type = transitions[t];\r\n                supported = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            supported: supported\r\n        };\r\n    }());\r\n\r\n    /**\r\n    * Creates event handler delegate that sends the instance as last argument.\r\n    * \r\n    * @return {Function}    a function wrapper which sends the instance as last argument.\r\n    */\r\n    function delegate(context, method) {\r\n        return function () {\r\n            if (arguments.length > 0) {\r\n                var args = [];\r\n                for (var x = 0; x < arguments.length; x += 1) {\r\n                    args.push(arguments[x]);\r\n                }\r\n                args.push(context);\r\n                return method.apply(context, args);\r\n            }\r\n            return method.apply(context, [null, context]);\r\n        };\r\n    }\r\n    /**\r\n    * Helper for creating a dialog close event.\r\n    * \r\n    * @return {object}\r\n    */\r\n    function createCloseEvent(index, button) {\r\n        return {\r\n            index: index,\r\n            button: button,\r\n            cancel: false\r\n        };\r\n    }\r\n    /**\r\n    * Helper for dispatching events.\r\n    *\r\n    * @param  {string} evenType The type of the event to disptach.\r\n    * @param  {object} instance The dialog instance disptaching the event.\r\n    *\r\n    * @return   {any}   The result of the invoked function.\r\n    */\r\n    function dispatchEvent(eventType, instance) {\r\n        if ( typeof instance.get(eventType) === 'function' ) {\r\n            return instance.get(eventType).call(instance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Super class for all dialogs\r\n     *\r\n     * @return {Object}\t\tbase dialog prototype\r\n     */\r\n    var dialog = (function () {\r\n        var //holds the list of used keys.\r\n            usedKeys = [],\r\n            //dummy variable, used to trigger dom reflow.\r\n            reflow = null,\r\n            //holds body tab index in case it has any.\r\n            tabindex = false,\r\n            //condition for detecting safari\r\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\r\n            //dialog building blocks\r\n            templates = {\r\n                dimmer:'<div class=\"ajs-dimmer\"></div>',\r\n                /*tab index required to fire click event before body focus*/\r\n                modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\r\n                dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\r\n                reset: '<button class=\"ajs-reset\"></button>',\r\n                commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\r\n                header: '<div class=\"ajs-header\"></div>',\r\n                body: '<div class=\"ajs-body\"></div>',\r\n                content: '<div class=\"ajs-content\"></div>',\r\n                footer: '<div class=\"ajs-footer\"></div>',\r\n                buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\r\n                button: '<button class=\"ajs-button\"></button>',\r\n                resizeHandle: '<div class=\"ajs-handle\"></div>',\r\n            },\r\n            //common class names\r\n            classes = {\r\n                animationIn: 'ajs-in',\r\n                animationOut: 'ajs-out',\r\n                base: 'alertify',\r\n                basic:'ajs-basic',\r\n                capture: 'ajs-capture',\r\n                closable:'ajs-closable',\r\n                fixed: 'ajs-fixed',\r\n                frameless:'ajs-frameless',\r\n                hidden: 'ajs-hidden',\r\n                maximize: 'ajs-maximize',\r\n                maximized: 'ajs-maximized',\r\n                maximizable:'ajs-maximizable',\r\n                modeless: 'ajs-modeless',\r\n                movable: 'ajs-movable',\r\n                noSelection: 'ajs-no-selection',\r\n                noOverflow: 'ajs-no-overflow',\r\n                noPadding:'ajs-no-padding',\r\n                pin:'ajs-pin',\r\n                pinnable:'ajs-pinnable',\r\n                prefix: 'ajs-',\r\n                resizable: 'ajs-resizable',\r\n                restore: 'ajs-restore',\r\n                shake:'ajs-shake',\r\n                unpinned:'ajs-unpinned',\r\n                noTransition:'ajs-no-transition'\r\n            };\r\n\r\n        /**\r\n         * Helper: initializes the dialog instance\r\n         * \r\n         * @return\t{Number}\tThe total count of currently open modals.\r\n         */\r\n        function initialize(instance){\r\n            \r\n            if(!instance.__internal){\r\n                //invoke preinit global hook\r\n                alertify.defaults.hooks.preinit(instance);\r\n                //no need to expose init after this.\r\n                delete instance.__init;\r\n              \r\n                //keep a copy of initial dialog settings\r\n                if(!instance.__settings){\r\n                    instance.__settings = copy(instance.settings);\r\n                }\r\n                \r\n                //get dialog buttons/focus setup\r\n                var setup;\r\n                if(typeof instance.setup === 'function'){\r\n                    setup = instance.setup();\r\n                    setup.options = setup.options  || {};\r\n                    setup.focus = setup.focus  || {};\r\n                }else{\r\n                    setup = {\r\n                        buttons:[],\r\n                        focus:{\r\n                            element:null,\r\n                            select:false\r\n                        },\r\n                        options:{\r\n                        }\r\n                    };\r\n                }\r\n                \r\n                //initialize hooks object.\r\n                if(typeof instance.hooks !== 'object'){\r\n                    instance.hooks = {};\r\n                }\r\n\r\n                //copy buttons defintion\r\n                var buttonsDefinition = [];\r\n                if(Array.isArray(setup.buttons)){\r\n                    for(var b=0;b<setup.buttons.length;b+=1){\r\n                        var ref  = setup.buttons[b],\r\n                            cpy = {};\r\n                        for (var i in ref) {\r\n                            if (ref.hasOwnProperty(i)) {\r\n                                cpy[i] = ref[i];\r\n                            }\r\n                        }\r\n                        buttonsDefinition.push(cpy);\r\n                    }\r\n                }\r\n\r\n                var internal = instance.__internal = {\r\n                    /**\r\n                     * Flag holding the open state of the dialog\r\n                     * \r\n                     * @type {Boolean}\r\n                     */\r\n                    isOpen:false,\r\n                    /**\r\n                     * Active element is the element that will receive focus after\r\n                     * closing the dialog. It defaults as the body tag, but gets updated\r\n                     * to the last focused element before the dialog was opened.\r\n                     *\r\n                     * @type {Node}\r\n                     */\r\n                    activeElement:document.body,\r\n                    timerIn:undefined,\r\n                    timerOut:undefined,\r\n                    buttons: buttonsDefinition,\r\n                    focus: setup.focus,\r\n                    options: {\r\n                        title: undefined,\r\n                        modal: undefined,\r\n                        basic:undefined,\r\n                        frameless:undefined,\r\n                        defaultFocusOff:undefined,\r\n                        pinned: undefined,\r\n                        movable: undefined,\r\n                        moveBounded:undefined,\r\n                        resizable: undefined,\r\n                        autoReset: undefined,\r\n                        closable: undefined,\r\n                        closableByDimmer: undefined,\r\n                        invokeOnCloseOff:undefined,\r\n                        maximizable: undefined,\r\n                        startMaximized: undefined,\r\n                        pinnable: undefined,\r\n                        transition: undefined,\r\n                        transitionOff: undefined,\r\n                        padding:undefined,\r\n                        overflow:undefined,\r\n                        onshow:undefined,\r\n                        onclosing:undefined,\r\n                        onclose:undefined,\r\n                        onfocus:undefined,\r\n                        onmove:undefined,\r\n                        onmoved:undefined,\r\n                        onresize:undefined,\r\n                        onresized:undefined,\r\n                        onmaximize:undefined,\r\n                        onmaximized:undefined,\r\n                        onrestore:undefined,\r\n                        onrestored:undefined\r\n                    },\r\n                    resetHandler:undefined,\r\n                    beginMoveHandler:undefined,\r\n                    beginResizeHandler:undefined,\r\n                    bringToFrontHandler:undefined,\r\n                    modalClickHandler:undefined,\r\n                    buttonsClickHandler:undefined,\r\n                    commandsClickHandler:undefined,\r\n                    transitionInHandler:undefined,\r\n                    transitionOutHandler:undefined,\r\n                    destroy:undefined\r\n                };\r\n\r\n                var elements = {};\r\n                //root node\r\n                elements.root = document.createElement('div');\r\n                //prevent FOUC in case of async styles loading.\r\n                elements.root.style.display = 'none';\r\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\r\n\r\n                elements.root.innerHTML = templates.dimmer + templates.modal;\r\n                \r\n                //dimmer\r\n                elements.dimmer = elements.root.firstChild;\r\n\r\n                //dialog\r\n                elements.modal = elements.root.lastChild;\r\n                elements.modal.innerHTML = templates.dialog;\r\n                elements.dialog = elements.modal.firstChild;\r\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\r\n\r\n                //reset links\r\n                elements.reset = [];\r\n                elements.reset.push(elements.dialog.firstChild);\r\n                elements.reset.push(elements.dialog.lastChild);\r\n                \r\n                //commands\r\n                elements.commands = {};\r\n                elements.commands.container = elements.reset[0].nextSibling;\r\n                elements.commands.pin = elements.commands.container.firstChild;\r\n                elements.commands.maximize = elements.commands.pin.nextSibling;\r\n                elements.commands.close = elements.commands.maximize.nextSibling;\r\n                \r\n                //header\r\n                elements.header = elements.commands.container.nextSibling;\r\n\r\n                //body\r\n                elements.body = elements.header.nextSibling;\r\n                elements.body.innerHTML = templates.content;\r\n                elements.content = elements.body.firstChild;\r\n\r\n                //footer\r\n                elements.footer = elements.body.nextSibling;\r\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\r\n                \r\n                //resize handle\r\n                elements.resizeHandle = elements.footer.nextSibling;\r\n\r\n                //buttons\r\n                elements.buttons = {};\r\n                elements.buttons.auxiliary = elements.footer.firstChild;\r\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\r\n                elements.buttons.primary.innerHTML = templates.button;\r\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\r\n                //remove button template\r\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\r\n                               \r\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\r\n                    var button = instance.__internal.buttons[x];\r\n                    \r\n                    // add to the list of used keys.\r\n                    if(usedKeys.indexOf(button.key) < 0){\r\n                        usedKeys.push(button.key);\r\n                    }\r\n\r\n                    button.element = elements.buttonTemplate.cloneNode();\r\n                    button.element.innerHTML = button.text;\r\n                    if(typeof button.className === 'string' &&  button.className !== ''){\r\n                        addClass(button.element, button.className);\r\n                    }\r\n                    for(var key in button.attrs){\r\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\r\n                            button.element.setAttribute(key, button.attrs[key]);\r\n                        }\r\n                    }\r\n                    if(button.scope === 'auxiliary'){\r\n                        elements.buttons.auxiliary.appendChild(button.element);\r\n                    }else{\r\n                        elements.buttons.primary.appendChild(button.element);\r\n                    }\r\n                }\r\n                //make elements pubic\r\n                instance.elements = elements;\r\n                \r\n                //save event handlers delegates\r\n                internal.resetHandler = delegate(instance, onReset);\r\n                internal.beginMoveHandler = delegate(instance, beginMove);\r\n                internal.beginResizeHandler = delegate(instance, beginResize);\r\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\r\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\r\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\r\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\r\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\r\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\r\n\r\n                //settings\r\n                for(var opKey in internal.options){\r\n                    if(setup.options[opKey] !== undefined){\r\n                        // if found in user options\r\n                        instance.set(opKey, setup.options[opKey]);\r\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\r\n                        // else if found in defaults options\r\n                        instance.set(opKey, alertify.defaults[opKey]);\r\n                    }else if(opKey === 'title' ) {\r\n                        // else if title key, use alertify.defaults.glossary\r\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\r\n                    }\r\n                }\r\n\r\n                // allow dom customization\r\n                if(typeof instance.build === 'function'){\r\n                    instance.build();\r\n                }\r\n\r\n                //invoke postinit global hook\r\n                alertify.defaults.hooks.postinit(instance);\r\n            }\r\n\r\n            //add to the end of the DOM tree.\r\n            document.body.appendChild(instance.elements.root);\r\n        }\r\n\r\n        /**\r\n         * Helper: maintains scroll position\r\n         *\r\n         */\r\n        var scrollX, scrollY;\r\n        function saveScrollPosition(){\r\n            scrollX = getScrollLeft();\r\n            scrollY = getScrollTop();\r\n        }\r\n        function restoreScrollPosition(){\r\n            window.scrollTo(scrollX, scrollY);\r\n        }\r\n\r\n        /**\r\n         * Helper: adds/removes no-overflow class from body\r\n         *\r\n         */\r\n        function ensureNoOverflow(){\r\n            var requiresNoOverflow = 0;\r\n            for(var x=0;x<openDialogs.length;x+=1){\r\n                var instance = openDialogs[x];\r\n                if(instance.isModal() || instance.isMaximized()){\r\n                    requiresNoOverflow+=1;\r\n                }\r\n            }\r\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\r\n                //last open modal or last maximized one\r\n                removeClass(document.body, classes.noOverflow);\r\n                preventBodyShift(false);\r\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\r\n                //first open modal or first maximized one\r\n                preventBodyShift(true);\r\n                addClass(document.body, classes.noOverflow);\r\n            }\r\n        }\r\n        var top = '', topScroll = 0;\r\n        /**\r\n         * Helper: prevents body shift.\r\n         *\r\n         */\r\n        function preventBodyShift(add){\r\n            if(alertify.defaults.preventBodyShift){\r\n                if(add && document.documentElement.scrollHeight > document.documentElement.clientHeight ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\r\n                    topScroll = scrollY;\r\n                    top = window.getComputedStyle(document.body).top;\r\n                    addClass(document.body, classes.fixed);\r\n                    document.body.style.top = -scrollY + 'px';\r\n                } else if(!add) {\r\n                    scrollY = topScroll;\r\n                    document.body.style.top = top;\r\n                    removeClass(document.body, classes.fixed);\r\n                    restoreScrollPosition();\r\n                }\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Sets the name of the transition used to show/hide the dialog\r\n         * \r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         */\r\n        function updateTransition(instance, value, oldValue){\r\n            if(typeof oldValue === 'string'){\r\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\r\n            }\r\n            addClass(instance.elements.root, classes.prefix + value);\r\n            reflow = instance.elements.root.offsetWidth;\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog no transition \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateTransitionOff(instance){\r\n            if (instance.get('transitionOff')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.noTransition);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.noTransition);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog display mode\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateDisplayMode(instance){\r\n            if(instance.get('modal')){\r\n\r\n                //make modal\r\n                removeClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    unbindModelessEvents(instance);\r\n\r\n                    //in case a pinned modless dialog was made modal while open.\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }else{\r\n                //make modelss\r\n                addClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    bindModelessEvents(instance);\r\n\r\n                    //in case pin/unpin was called while a modal is open\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog basic view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateBasicMode(instance){\r\n            if (instance.get('basic')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.basic);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.basic);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog frameless view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateFramelessMode(instance){\r\n            if (instance.get('frameless')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.frameless);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.frameless);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n         *\r\n         * @param {Event} event Focus event\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bringToFront(event, instance){\r\n            \r\n            // Do not bring to front if preceeded by an open modal\r\n            var index = openDialogs.indexOf(instance);\r\n            for(var x=index+1;x<openDialogs.length;x+=1){\r\n                if(openDialogs[x].isModal()){\r\n                    return;\r\n                }\r\n            }\r\n\t\t\t\r\n            // Bring to front by making it the last child.\r\n            if(document.body.lastChild !== instance.elements.root){\r\n                document.body.appendChild(instance.elements.root);\r\n                //also make sure its at the end of the list\r\n                openDialogs.splice(openDialogs.indexOf(instance),1);\r\n                openDialogs.push(instance);\r\n                setFocus(instance);\r\n            }\r\n\t\t\t\r\n            return false;\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{undefined}\t\r\n         */\r\n        function optionUpdated(instance, option, oldValue, newValue){\r\n            switch(option){\r\n            case 'title':\r\n                instance.setHeader(newValue);\r\n                break;\r\n            case 'modal':\r\n                updateDisplayMode(instance);\r\n                break;\r\n            case 'basic':\r\n                updateBasicMode(instance);\r\n                break;\r\n            case 'frameless':\r\n                updateFramelessMode(instance);\r\n                break;\r\n            case 'pinned':\r\n                updatePinned(instance);\r\n                break;\r\n            case 'closable':\r\n                updateClosable(instance);\r\n                break;\r\n            case 'maximizable':\r\n                updateMaximizable(instance);\r\n                break;\r\n            case 'pinnable':\r\n                updatePinnable(instance);\r\n                break;\r\n            case 'movable':\r\n                updateMovable(instance);\r\n                break;\r\n            case 'resizable':\r\n                updateResizable(instance);\r\n                break;\r\n            case 'padding':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noPadding);\r\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\r\n                    addClass(instance.elements.root, classes.noPadding);\r\n                }\r\n                break;\r\n            case 'overflow':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noOverflow);\r\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\r\n                    addClass(instance.elements.root, classes.noOverflow);\r\n                }\r\n                break;\r\n            case 'transition':\r\n                updateTransition(instance,newValue, oldValue);\r\n                break;\r\n            case 'transitionOff':\r\n                updateTransitionOff(instance);\r\n                break;\r\n            }\r\n\r\n            // internal on option updated event\r\n            if(typeof instance.hooks.onupdate === 'function'){\r\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Object} obj The object to set/get a value on/from.\r\n         * @param {Function} callback The callback function to call if the key was found.\r\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{Object} result object \r\n         *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n         *\t\tGET: \r\n         *\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t- value: the property value.\r\n         *\t\tSET:\r\n         *\t\t- items: a list of key value pairs of the properties being set.\r\n         *\t\t\t\teach contains:\r\n         *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t\t\t\t- key: the property key.\r\n         *\t\t\t\t\t- value: the property value.\r\n         */\r\n        function update(instance, obj, callback, key, value){\r\n            var result = {op:undefined, items: [] };\r\n            if(typeof value === 'undefined' && typeof key === 'string') {\r\n                //get\r\n                result.op = 'get';\r\n                if(obj.hasOwnProperty(key)){\r\n                    result.found = true;\r\n                    result.value = obj[key];\r\n                }else{\r\n                    result.found = false;\r\n                    result.value = undefined;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var old;\r\n                //set\r\n                result.op = 'set';\r\n                if(typeof key === 'object'){\r\n                    //set multiple\r\n                    var args = key;\r\n                    for (var prop in args) {\r\n                        if (obj.hasOwnProperty(prop)) {\r\n                            if(obj[prop] !== args[prop]){\r\n                                old = obj[prop];\r\n                                obj[prop] = args[prop];\r\n                                callback.call(instance,prop, old, args[prop]);\r\n                            }\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\r\n                        }else{\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\r\n                        }\r\n                    }\r\n                } else if (typeof key === 'string'){\r\n                    //set single\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        if(obj[key] !== value){\r\n                            old  = obj[key];\r\n                            obj[key] = value;\r\n                            callback.call(instance,key, old, value);\r\n                        }\r\n                        result.items.push({'key': key, 'value': value , 'found':true});\r\n\r\n                    }else{\r\n                        result.items.push({'key': key, 'value': value , 'found':false});\r\n                    }\r\n                } else {\r\n                    //invalid params\r\n                    throw new Error('args must be a string or object');\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n        /**\r\n         * Triggers a close event.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function triggerClose(instance) {\r\n            var found;\r\n            triggerCallback(instance, function (button) {\r\n                return found = instance.get('invokeOnCloseOff') !== true && (button.invokeOnClose === true);\r\n            });\r\n            //none of the buttons registered as onclose callback\r\n            //close the dialog\r\n            if (!found && instance.isOpen()) {\r\n                instance.close();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Dialogs commands event handler, attached to the dialog commands element.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function commandsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            switch (target) {\r\n            case instance.elements.commands.pin:\r\n                if (!instance.isPinned()) {\r\n                    pin(instance);\r\n                } else {\r\n                    unpin(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.maximize:\r\n                if (!instance.isMaximized()) {\r\n                    maximize(instance);\r\n                } else {\r\n                    restore(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.close:\r\n                triggerClose(instance);\r\n                break;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper: pins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dialog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function pin(instance) {\r\n            //pin the dialog\r\n            instance.set('pinned', true);\r\n        }\r\n\r\n        /**\r\n         * Helper: unpins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function unpin(instance) {\r\n            //unpin the dialog \r\n            instance.set('pinned', false);\r\n        }\r\n\r\n\r\n        /**\r\n         * Helper: enlarges the dialog to fill the entire screen.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function maximize(instance) {\r\n            // allow custom `onmaximize` method\r\n            dispatchEvent('onmaximize', instance);\r\n            //maximize the dialog \r\n            addClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onmaximized` method\r\n            dispatchEvent('onmaximized', instance);\r\n        }\r\n\r\n        /**\r\n         * Helper: returns the dialog to its former size.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function restore(instance) {\r\n            // allow custom `onrestore` method\r\n            dispatchEvent('onrestore', instance);\r\n            //maximize the dialog \r\n            removeClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onrestored` method\r\n            dispatchEvent('onrestored', instance);\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinnable(instance) {\r\n            if (instance.get('pinnable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.pinnable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.pinnable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper: Fixes the absolutly positioned modal div position.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function addAbsPositionFix(instance) {\r\n            var scrollLeft = getScrollLeft();\r\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\r\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\r\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\r\n        }\r\n\r\n        /**\r\n         * Helper: Removes the absolutly positioned modal div position fix.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function removeAbsPositionFix(instance) {\r\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\r\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\r\n            instance.elements.modal.style.marginTop = '';\r\n            instance.elements.modal.style.marginLeft = '';\r\n            instance.elements.modal.style.marginRight = '';\r\n\r\n            if (instance.isOpen()) {\r\n                var top = 0,\r\n                    left = 0\r\n                ;\r\n                if (instance.elements.dialog.style.top !== '') {\r\n                    top = parseInt(instance.elements.dialog.style.top, 10);\r\n                }\r\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\r\n\r\n                if (instance.elements.dialog.style.left !== '') {\r\n                    left = parseInt(instance.elements.dialog.style.left, 10);\r\n                }\r\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\r\n            }\r\n        }\r\n        /**\r\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateAbsPositionFix(instance) {\r\n            // if modeless and unpinned add fix\r\n            if (!instance.get('modal') && !instance.get('pinned')) {\r\n                addAbsPositionFix(instance);\r\n            } else {\r\n                removeAbsPositionFix(instance);\r\n            }\r\n        }\r\n        /**\r\n         * Toggles the dialog position lock | modeless only.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to make it modal, false otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinned(instance) {\r\n            if (instance.get('pinned')) {\r\n                removeClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen()) {\r\n                    removeAbsPositionFix(instance);\r\n                }\r\n            } else {\r\n                addClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen() && !instance.isModal()) {\r\n                    addAbsPositionFix(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMaximizable(instance) {\r\n            if (instance.get('maximizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.maximizable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.maximizable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the close box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateClosable(instance) {\r\n            if (instance.get('closable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.closable);\r\n                bindClosableEvents(instance);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.closable);\r\n                unbindClosableEvents(instance);\r\n            }\r\n        }\r\n\r\n        \r\n        var cancelClick = false,// flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\r\n            modalClickHandlerTS=0 // stores last click timestamp to prevent executing the handler twice on double click.\r\n            ;\r\n\r\n        /**\r\n         * Helper: closes the modal dialog when clicking the modal\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function modalClickHandler(event, instance) {\r\n            if(event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick){\r\n                var target = event.srcElement || event.target;\r\n                if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\r\n                    triggerClose(instance);\r\n                }\r\n            }\r\n            cancelClick = false;\r\n        }\r\n\r\n        // stores last call timestamp to prevent triggering the callback twice.\r\n        var callbackTS = 0;\r\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\r\n        var cancelKeyup = false;\r\n        /** \r\n         * Helper: triggers a button callback\r\n         *\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * @param {Function}\tCallback to check which button triggered the event.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function triggerCallback(instance, check) {\r\n            if(Date.now() - callbackTS > 200 && (callbackTS = Date.now())){\r\n                for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\r\n                    var button = instance.__internal.buttons[idx];\r\n                    if (!button.element.disabled && check(button)) {\r\n                        var closeEvent = createCloseEvent(idx, button);\r\n                        if (typeof instance.callback === 'function') {\r\n                            instance.callback.apply(instance, [closeEvent]);\r\n                        }\r\n                        //close the dialog only if not canceled.\r\n                        if (closeEvent.cancel === false) {\r\n                            instance.close();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clicks event handler, attached to the dialog footer.\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function buttonsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            triggerCallback(instance, function (button) {\r\n                // if this button caused the click, cancel keyup event\r\n                return button.element === target && (cancelKeyup = true);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Keyup event handler, attached to the document.body\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function keyupHandler(event) {\r\n            //hitting enter while button has focus will trigger keyup too.\r\n            //ignore if handled by clickHandler\r\n            if (cancelKeyup) {\r\n                cancelKeyup = false;\r\n                return;\r\n            }\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\r\n                triggerClose(instance);\r\n                return false;\r\n            }else if (usedKeys.indexOf(keyCode) > -1) {\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        /**\r\n        * Keydown event handler, attached to the document.body\r\n        *\r\n        * @param {Event}\t\tDOM event object.\r\n        * @param {Object}\t\tThe dilog instance.\r\n        * \r\n        * @return {undefined}\r\n        */\r\n        function keydownHandler(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\r\n                var buttons = instance.__internal.buttons;\r\n                for (var x = 0; x < buttons.length; x += 1) {\r\n                    if (document.activeElement === buttons[x].element) {\r\n                        switch (keyCode) {\r\n                        case keys.LEFT:\r\n                            buttons[(x || buttons.length) - 1].element.focus();\r\n                            return;\r\n                        case keys.RIGHT:\r\n                            buttons[(x + 1) % buttons.length].element.focus();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Sets focus to proper dialog element\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function setFocus(instance, resetTarget) {\r\n            // reset target has already been determined.\r\n            if (resetTarget) {\r\n                resetTarget.focus();\r\n            } else {\r\n                // current instance focus settings\r\n                var focus = instance.__internal.focus;\r\n                // the focus element.\r\n                var element = focus.element;\r\n\r\n                switch (typeof focus.element) {\r\n                // a number means a button index\r\n                case 'number':\r\n                    if (instance.__internal.buttons.length > focus.element) {\r\n                        //in basic view, skip focusing the buttons.\r\n                        if (instance.get('basic') === true) {\r\n                            element = instance.elements.reset[0];\r\n                        } else {\r\n                            element = instance.__internal.buttons[focus.element].element;\r\n                        }\r\n                    }\r\n                    break;\r\n                // a string means querySelector to select from dialog body contents.\r\n                case 'string':\r\n                    element = instance.elements.body.querySelector(focus.element);\r\n                    break;\r\n                // a function should return the focus element.\r\n                case 'function':\r\n                    element = focus.element.call(instance);\r\n                    break;\r\n                }\r\n\r\n                // if no focus element, default to first reset element.\r\n                if (instance.get('defaultFocusOff') === true || ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0)) {\r\n                    element = instance.elements.reset[0];\r\n                }\r\n                // focus\r\n                if (element && element.focus) {\r\n                    element.focus();\r\n                    // if selectable\r\n                    if (focus.select && element.select) {\r\n                        element.select();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Focus event handler, attached to document.body and dialogs own reset links.\r\n         * handles the focus for modal dialogs only.\r\n         *\r\n         * @param {Event} event DOM focus event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function onReset(event, instance) {\r\n\r\n            // should work on last modal if triggered from document.body \r\n            if (!instance) {\r\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\r\n                    if (openDialogs[x].isModal()) {\r\n                        instance = openDialogs[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(instance) {\r\n                // if modal\r\n                if (instance.isModal()) {\r\n                    // determine reset target to enable forward/backward tab cycle.\r\n                    var firstReset = instance.elements.reset[0],\r\n                        lastReset = instance.elements.reset[1],\r\n                        lastFocusedElement = event.relatedTarget,\r\n                        within = instance.elements.root.contains(lastFocusedElement),\r\n                        target = event.srcElement || event.target,\r\n                        resetTarget;\r\n\r\n                    //if the previous focused element element was outside the modal do nthing\r\n                    if(  /*first show */\r\n                        (target === firstReset && !within) ||\r\n                         /*focus cycle */\r\n                        (target === lastReset && lastFocusedElement === firstReset)){\r\n                        return;\r\n                    }else if(target === lastReset || target === document.body){\r\n                        resetTarget = firstReset;\r\n                    }else if(target === firstReset && lastFocusedElement === lastReset){\r\n                        resetTarget = findTabbable(instance);\r\n                    }else if(target === firstReset && within){\r\n                        resetTarget = findTabbable(instance, true);\r\n                    }\r\n                    // focus\r\n                    setFocus(instance, resetTarget);\r\n                }\r\n            }\r\n        }\r\n        function findTabbable(instance, last){\r\n            var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\r\n            if(last){\r\n                tabbables.reverse();\r\n            }\r\n            for(var x=0;x<tabbables.length;x+=1){\r\n                var tabbable = tabbables[x];\r\n                //check if visible\r\n                if(!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)){\r\n                    return tabbable;\r\n                }\r\n            }\r\n        }\r\n        function recycleTab(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            if (instance && event.shiftKey && event.keyCode === keys.TAB) {\r\n                instance.elements.reset[1].focus();\r\n            }\r\n        }\r\n        /**\r\n         * Transition in transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionInEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerIn);\r\n\r\n            // once transition is complete, set focus\r\n            setFocus(instance);\r\n\r\n            // allow handling key up after transition ended.\r\n            cancelKeyup = false;\r\n\r\n            // allow custom `onfocus` method\r\n            dispatchEvent('onfocus', instance);\r\n\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            removeClass(instance.elements.root, classes.animationIn);\r\n        }\r\n\r\n        /**\r\n         * Transition out transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionOutEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerOut);\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // reset move updates\r\n            resetMove(instance);\r\n            // reset resize updates\r\n            resetResize(instance);\r\n\r\n            // restore if maximized\r\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\r\n                restore(instance);\r\n            }\r\n\r\n            //destory the instance\r\n            if (typeof instance.__internal.destroy === 'function') {\r\n                instance.__internal.destroy.apply(instance);\r\n            }\r\n        }\r\n        /* Controls moving a dialog around */\r\n        //holde the current moving instance\r\n        var movable = null,\r\n            //holds the current X offset when move starts\r\n            offsetX = 0,\r\n            //holds the current Y offset when move starts\r\n            offsetY = 0,\r\n            xProp = 'pageX',\r\n            yProp = 'pageY',\r\n            bounds = null,\r\n            refreshTop = false,\r\n            moveDelegate = null\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element top/left coordinates\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElement(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n           \r\n            element.style.left = left + 'px';\r\n            element.style.top = top + 'px';\r\n           \r\n        }\r\n        /**\r\n         * Helper: sets the element top/left coordinates within screen bounds\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElementBounded(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n            \r\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\r\n            if(refreshTop){\r\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\r\n            }else{\r\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\r\n            }\r\n        }\r\n            \r\n\r\n        /**\r\n         * Triggers the start of a move event, attached to the header element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginMove(event, instance) {\r\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\r\n                var eventSrc, left=0, top=0;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                    xProp = 'clientX';\r\n                    yProp = 'clientY';\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n\r\n                if (eventSrc) {\r\n\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n\r\n                    if (element.style.left) {\r\n                        left = parseInt(element.style.left, 10);\r\n                    }\r\n\r\n                    if (element.style.top) {\r\n                        top = parseInt(element.style.top, 10);\r\n                    }\r\n                    \r\n                    offsetX = eventSrc[xProp] - left;\r\n                    offsetY = eventSrc[yProp] - top;\r\n\r\n                    if(instance.isModal()){\r\n                        offsetY += instance.elements.modal.scrollTop;\r\n                    }else if(instance.isPinned()){\r\n                        offsetY -= document.body.scrollTop;\r\n                    }\r\n                    \r\n                    if(instance.get('moveBounded')){\r\n                        var current = element,\r\n                            offsetLeft = -left,\r\n                            offsetTop = -top;\r\n                        \r\n                        //calc offset\r\n                        do {\r\n                            offsetLeft += current.offsetLeft;\r\n                            offsetTop += current.offsetTop;\r\n                        } while (current = current.offsetParent);\r\n                        \r\n                        bounds = {\r\n                            maxLeft : offsetLeft,\r\n                            minLeft : -offsetLeft,\r\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\r\n                            minTop  : -offsetTop\r\n                        };\r\n                        moveDelegate = moveElementBounded;\r\n                    }else{\r\n                        bounds = null;\r\n                        moveDelegate = moveElement;\r\n                    }\r\n                    \r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', instance);\r\n\r\n                    refreshTop = !instance.isModal() && instance.isPinned();\r\n                    movable = instance;\r\n                    moveDelegate(eventSrc, element);\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual move handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function move(event) {\r\n            if (movable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    moveDelegate(eventSrc, movable.elements.dialog);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a move event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endMove() {\r\n            if (movable) {\r\n                var instance = movable;\r\n                movable = bounds = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                // allow custom `onmoved` method\r\n                dispatchEvent('onmoved', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by moving the element to its original state,\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetMove(instance) {\r\n            movable = null;\r\n            var element = instance.elements.dialog;\r\n            element.style.left = element.style.top = '';\r\n        }\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMovable(instance) {\r\n            if (instance.get('movable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    bindMovableEvents(instance);\r\n                }\r\n            } else {\r\n\r\n                //reset\r\n                resetMove(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    unbindMovableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Controls moving a dialog around */\r\n        //holde the current instance being resized\t\t\r\n        var resizable = null,\r\n            //holds the staring left offset when resize starts.\r\n            startingLeft = Number.Nan,\r\n            //holds the staring width when resize starts.\r\n            startingWidth = 0,\r\n            //holds the initial width when resized for the first time.\r\n            minWidth = 0,\r\n            //holds the offset of the resize handle.\r\n            handleOffset = 0\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n         *\r\n         * @param {Event} event\tDOM mousemove event object.\r\n         * @param {Node} element The element being moved.\r\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resizeElement(event, element, pageRelative) {\r\n\r\n            //calculate offsets from 0,0\r\n            var current = element;\r\n            var offsetLeft = 0;\r\n            var offsetTop = 0;\r\n            do {\r\n                offsetLeft += current.offsetLeft;\r\n                offsetTop += current.offsetTop;\r\n            } while (current = current.offsetParent);\r\n\r\n            // determine X,Y coordinates.\r\n            var X, Y;\r\n            if (pageRelative === true) {\r\n                X = event.pageX;\r\n                Y = event.pageY;\r\n            } else {\r\n                X = event.clientX;\r\n                Y = event.clientY;\r\n            }\r\n            // rtl handling\r\n            var isRTL = isRightToLeft();\r\n            if (isRTL) {\r\n                // reverse X \r\n                X = document.body.offsetWidth - X;\r\n                // if has a starting left, calculate offsetRight\r\n                if (!isNaN(startingLeft)) {\r\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\r\n                }\r\n            }\r\n\r\n            // set width/height\r\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\r\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\r\n\r\n            // if the element being resized has a starting left, maintain it.\r\n            // the dialog is centered, divide by half the offset to maintain the margins.\r\n            if (!isNaN(startingLeft)) {\r\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\r\n                if (isRTL) {\r\n                    //negate the diff, why?\r\n                    //when growing it should decrease left\r\n                    //when shrinking it should increase left\r\n                    diff *= -1;\r\n                }\r\n                if (element.offsetWidth > startingWidth) {\r\n                    //growing\r\n                    element.style.left = (startingLeft + diff) + 'px';\r\n                } else if (element.offsetWidth >= minWidth) {\r\n                    //shrinking\r\n                    element.style.left = (startingLeft - diff) + 'px';\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginResize(event, instance) {\r\n            if (!instance.isMaximized()) {\r\n                var eventSrc;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', instance);\r\n                    \r\n                    resizable = instance;\r\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n                    startingLeft = parseInt(element.style.left, 10);\r\n                    element.style.height = element.offsetHeight + 'px';\r\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\r\n\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual resize handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resize(event) {\r\n            if (resizable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endResize() {\r\n            if (resizable) {\r\n                var instance = resizable;\r\n                resizable = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                cancelClick = true;\r\n                // allow custom `onresized` method\r\n                dispatchEvent('onresized', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by resizing the element to its original state.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetResize(instance) {\r\n            resizable = null;\r\n            var element = instance.elements.dialog;\r\n            if (element.style.maxWidth === 'none') {\r\n                //clear inline styles.\r\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\r\n                //reset variables.\r\n                startingLeft = Number.Nan;\r\n                startingWidth = minWidth = handleOffset = 0;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateResizable(instance) {\r\n            if (instance.get('resizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    bindResizableEvents(instance);\r\n                }\r\n            } else {\r\n                //reset\r\n                resetResize(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    unbindResizableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reset move/resize on window resize.\r\n         *\r\n         * @param {Event} event\twindow resize event object.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function windowResize(/*event*/) {\r\n            for (var x = 0; x < openDialogs.length; x += 1) {\r\n                var instance = openDialogs[x];\r\n                if (instance.get('autoReset')) {\r\n                    resetMove(instance);\r\n                    resetResize(instance);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Bind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindEvents(instance) {\r\n            // if first dialog, hook global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                on(window, 'resize', windowResize);\r\n                on(document.body, 'keyup', keyupHandler);\r\n                on(document.body, 'keydown', keydownHandler);\r\n                on(document.body, 'focus', onReset);\r\n\r\n                //move\r\n                on(document.documentElement, 'mousemove', move);\r\n                on(document.documentElement, 'touchmove', move, false, false);\r\n                on(document.documentElement, 'mouseup', endMove);\r\n                on(document.documentElement, 'touchend', endMove);\r\n                //resize\r\n                on(document.documentElement, 'mousemove', resize);\r\n                on(document.documentElement, 'touchmove', resize, false, false);\r\n                on(document.documentElement, 'mouseup', endResize);\r\n                on(document.documentElement, 'touchend', endResize);\r\n            }\r\n\r\n            // common events\r\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            on(instance.elements.reset[0], 'keydown', recycleTab);\r\n            on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            //prevent handling key up when dialog is being opened by a key stroke.\r\n            cancelKeyup = true;\r\n            // hook in transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                bindModelessEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                bindResizableEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                bindMovableEvents(instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unbind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindEvents(instance) {\r\n            // if last dialog, remove global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                off(window, 'resize', windowResize);\r\n                off(document.body, 'keyup', keyupHandler);\r\n                off(document.body, 'keydown', keydownHandler);\r\n                off(document.body, 'focus', onReset);\r\n                //move\r\n                off(document.documentElement, 'mousemove', move);\r\n                off(document.documentElement, 'mouseup', endMove);\r\n                //resize\r\n                off(document.documentElement, 'mousemove', resize);\r\n                off(document.documentElement, 'mouseup', endResize);\r\n            }\r\n\r\n            // common events\r\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            off(instance.elements.reset[0], 'keydown', recycleTab);\r\n            off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            // hook out transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                unbindModelessEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                unbindMovableEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                unbindResizableEvents(instance);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Bind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindModelessEvents(instance) {\r\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n        /**\r\n         * Unbind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindModelessEvents(instance) {\r\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindMovableEvents(instance) {\r\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindMovableEvents(instance) {\r\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindResizableEvents(instance) {\r\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindResizableEvents(instance) {\r\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Bind closable events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindClosableEvents(instance) {\r\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind closable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindClosableEvents(instance) {\r\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n        // dialog API\r\n        return {\r\n            __init:initialize,\r\n            /**\r\n             * Check if dialog is currently open\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isOpen: function () {\r\n                return this.__internal.isOpen;\r\n            },\r\n            isModal: function (){\r\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\r\n            },\r\n            isMaximized:function(){\r\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\r\n            },\r\n            isPinned:function(){\r\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\r\n            },\r\n            maximize:function(){\r\n                if(!this.isMaximized()){\r\n                    maximize(this);\r\n                }\r\n                return this;\r\n            },\r\n            restore:function(){\r\n                if(this.isMaximized()){\r\n                    restore(this);\r\n                }\r\n                return this;\r\n            },\r\n            pin:function(){\r\n                if(!this.isPinned()){\r\n                    pin(this);\r\n                }\r\n                return this;\r\n            },\r\n            unpin:function(){\r\n                if(this.isPinned()){\r\n                    unpin(this);\r\n                }\r\n                return this;\r\n            },\r\n            bringToFront:function(){\r\n                bringToFront(null, this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Move the dialog to a specific x/y coordinates\r\n             *\r\n             * @param {Number} x    The new dialog x coordinate in pixels.\r\n             * @param {Number} y    The new dialog y coordinate in pixels.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            moveTo:function(x,y){\r\n                if(!isNaN(x) && !isNaN(y)){\r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', this);\r\n                    \r\n                    var element = this.elements.dialog,\r\n                        current = element,\r\n                        offsetLeft = 0,\r\n                        offsetTop = 0;\r\n                    \r\n                    //subtract existing left,top\r\n                    if (element.style.left) {\r\n                        offsetLeft -= parseInt(element.style.left, 10);\r\n                    }\r\n                    if (element.style.top) {\r\n                        offsetTop -= parseInt(element.style.top, 10);\r\n                    }\r\n                    //calc offset\r\n                    do {\r\n                        offsetLeft += current.offsetLeft;\r\n                        offsetTop += current.offsetTop;\r\n                    } while (current = current.offsetParent);\r\n\r\n                    //calc left, top\r\n                    var left = (x - offsetLeft);\r\n                    var top  = (y - offsetTop);\r\n\r\n                    //// rtl handling\r\n                    if (isRightToLeft()) {\r\n                        left *= -1;\r\n                    }\r\n\r\n                    element.style.left = left + 'px';\r\n                    element.style.top = top + 'px';\r\n                    \r\n                    // allow custom `onmoved` method\r\n                    dispatchEvent('onmoved', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n             * The dialog can be resized to:\r\n             *  A minimum width equal to the initial display width\r\n             *  A minimum height equal to the sum of header/footer heights.\r\n             *\r\n             *\r\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            resizeTo:function(width,height){\r\n                var w = parseFloat(width),\r\n                    h = parseFloat(height),\r\n                    regex = /(\\d*\\.\\d+|\\d+)%/\r\n                ;\r\n\r\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\r\n                    \r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', this);\r\n                    \r\n                    if(('' + width).match(regex)){\r\n                        w = w / 100 * document.documentElement.clientWidth ;\r\n                    }\r\n\r\n                    if(('' + height).match(regex)){\r\n                        h = h / 100 * document.documentElement.clientHeight;\r\n                    }\r\n\r\n                    var element = this.elements.dialog;\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = w + 'px';\r\n                    element.style.height = h + 'px';\r\n                    \r\n                    // allow custom `onresized` method\r\n                    dispatchEvent('onresized', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options \r\n             *\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting : function (key, value) {\r\n                var self = this;\r\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\r\n                if(result.op === 'get'){\r\n                    if(result.found){\r\n                        return result.value;\r\n                    }else if(typeof this.settings !== 'undefined'){\r\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\r\n                    }else{\r\n                        return undefined;\r\n                    }\r\n                }else if(result.op === 'set'){\r\n                    if(result.items.length > 0){\r\n                        var callback = this.settingUpdated || function(){};\r\n                        for(var x=0;x<result.items.length;x+=1){\r\n                            var item = result.items[x];\r\n                            if(!item.found && typeof this.settings !== 'undefined'){\r\n                                update(this, this.settings, callback, item.key, item.value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set:function(key, value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n            * Sets dialog header\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setHeader:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n            * Sets dialog contents\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setContent:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Show the dialog as modal\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            showModal: function(className){\r\n                return this.show(true, className);\r\n            },\r\n            /**\r\n             * Show the dialog\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            show: function (modal, className) {\r\n                \r\n                // ensure initialization\r\n                initialize(this);\r\n\r\n                if ( !this.__internal.isOpen ) {\r\n\r\n                    // add to open dialogs\r\n                    this.__internal.isOpen = true;\r\n                    openDialogs.push(this);\r\n\r\n                    // save last focused element\r\n                    if(alertify.defaults.maintainFocus){\r\n                        this.__internal.activeElement = document.activeElement;\r\n                    }\r\n\r\n                    // set tabindex attribute on body element this allows script to give it focusable\r\n                    if(!document.body.hasAttribute('tabindex')) {\r\n                        document.body.setAttribute( 'tabindex', tabindex = '0');\r\n                    }\r\n\r\n                    //allow custom dom manipulation updates before showing the dialog.\r\n                    if(typeof this.prepare === 'function'){\r\n                        this.prepare();\r\n                    }\r\n\r\n                    bindEvents(this);\r\n\r\n                    if(modal !== undefined){\r\n                        this.set('modal', modal);\r\n                    }\r\n\r\n                    //save scroll to prevent document jump\r\n                    saveScrollPosition();\r\n\r\n                    ensureNoOverflow();\r\n\r\n                    // allow custom dialog class on show\r\n                    if(typeof className === 'string' && className !== ''){\r\n                        this.__internal.className = className;\r\n                        addClass(this.elements.root, className);\r\n                    }\r\n\r\n                    // maximize if start maximized\r\n                    if ( this.get('startMaximized')) {\r\n                        this.maximize();\r\n                    }else if(this.isMaximized()){\r\n                        restore(this);\r\n                    }\r\n\r\n                    updateAbsPositionFix(this);\r\n                    this.elements.root.removeAttribute('style');\r\n                    removeClass(this.elements.root, classes.animationOut);\r\n                    addClass(this.elements.root, classes.animationIn);\r\n\r\n                    // set 1s fallback in case transition event doesn't fire\r\n                    clearTimeout( this.__internal.timerIn);\r\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\r\n\r\n                    if(isSafari){\r\n                        // force desktop safari reflow\r\n                        var root = this.elements.root;\r\n                        root.style.display  = 'none';\r\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\r\n                    }\r\n\r\n                    //reflow\r\n                    reflow = this.elements.root.offsetWidth;\r\n                  \r\n                    // show dialog\r\n                    removeClass(this.elements.root, classes.hidden);\r\n\r\n                    //restore scroll to prevent document jump\r\n                    restoreScrollPosition();\r\n\r\n                    // internal on show event\r\n                    if(typeof this.hooks.onshow === 'function'){\r\n                        this.hooks.onshow.call(this);\r\n                    }\r\n\r\n                    // allow custom `onshow` method\r\n                    dispatchEvent('onshow', this);\r\n\r\n                }else{\r\n                    // reset move updates\r\n                    resetMove(this);\r\n                    // reset resize updates\r\n                    resetResize(this);\r\n                    // shake the dialog to indicate its already open\r\n                    addClass(this.elements.dialog, classes.shake);\r\n                    var self = this;\r\n                    setTimeout(function(){\r\n                        removeClass(self.elements.dialog, classes.shake);\r\n                    },200);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close the dialog\r\n             *\r\n             * @return {Object} The dialog instance\r\n             */\r\n            close: function () {\r\n                if (this.__internal.isOpen ) {\r\n                    // custom `onclosing` event\r\n                    if(dispatchEvent('onclosing', this) !== false){\r\n\r\n                        unbindEvents(this);\r\n\r\n                        removeClass(this.elements.root, classes.animationIn);\r\n                        addClass(this.elements.root, classes.animationOut);\r\n\r\n                        // set 1s fallback in case transition event doesn't fire\r\n                        clearTimeout( this.__internal.timerOut );\r\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\r\n                        // hide dialog\r\n                        addClass(this.elements.root, classes.hidden);\r\n                        //reflow\r\n                        reflow = this.elements.modal.offsetWidth;\r\n\r\n                        // return focus to the last active element\r\n                        if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\r\n                            this.__internal.activeElement.focus();\r\n                            this.__internal.activeElement = null;\r\n                        }\r\n\r\n                        // remove custom dialog class on hide\r\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\r\n                            removeClass(this.elements.root, this.__internal.className);\r\n                        }\r\n\r\n                        // internal on close event\r\n                        if(typeof this.hooks.onclose === 'function'){\r\n                            this.hooks.onclose.call(this);\r\n                        }\r\n\r\n                        // allow custom `onclose` method\r\n                        dispatchEvent('onclose', this);\r\n\r\n                        //remove from open dialogs\r\n                        openDialogs.splice(openDialogs.indexOf(this),1);\r\n                        this.__internal.isOpen = false;\r\n\r\n                        ensureNoOverflow();\r\n                    }\r\n\r\n                }\r\n                // last dialog and tab index was set by us, remove it.\r\n                if(!openDialogs.length && tabindex === '0'){\r\n                    document.body.removeAttribute('tabindex');\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close all open dialogs except this.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeOthers:function(){\r\n                alertify.closeAll(this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Destroys this dialog instance\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            destroy:function(){\r\n                if(this.__internal) {\r\n                    if (this.__internal.isOpen ) {\r\n                        //mark dialog for destruction, this will be called on tranistionOut event.\r\n                        this.__internal.destroy = function(){\r\n                            destruct(this, initialize);\r\n                        };\r\n                        //close the dialog to unbind all events.\r\n                        this.close();\r\n                    }else if(!this.__internal.destroy){\r\n                        destruct(this, initialize);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n\t} () );\r\n    var notifier = (function () {\r\n        var reflow,\r\n            element,\r\n            openInstances = [],\r\n            classes = defaults.notifier.classes,\r\n            baseClass = classes.base;\r\n        /**\r\n         * Helper: initializes the notifier instance\r\n         *\r\n         */\r\n        function initialize(instance) {\r\n\r\n            if (!instance.__internal) {\r\n                instance.__internal = {\r\n                    position: alertify.defaults.notifier.position,\r\n                    delay: alertify.defaults.notifier.delay,\r\n                };\r\n\r\n                element = document.createElement('DIV');\r\n                var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\r\n                if(transitionOff){\r\n                    baseClass = classes.base + ' ajs-no-transition';\r\n                }\r\n                updatePosition(instance);\r\n            }\r\n\r\n            //add to DOM tree.\r\n            if (element.parentNode !== document.body) {\r\n                document.body.appendChild(element);\r\n            }\r\n        }\r\n\r\n        function pushInstance(instance) {\r\n            instance.__internal.pushed = true;\r\n            openInstances.push(instance);\r\n        }\r\n        function popInstance(instance) {\r\n            openInstances.splice(openInstances.indexOf(instance), 1);\r\n            instance.__internal.pushed = false;\r\n        }\r\n        /**\r\n         * Helper: update the notifier instance position\r\n         *\r\n         */\r\n        function updatePosition(instance) {\r\n            element.className = baseClass;\r\n            switch (instance.__internal.position) {\r\n            case 'top-right':\r\n                addClass(element, classes.top + ' ' + classes.right);\r\n                break;\r\n            case 'top-left':\r\n                addClass(element, classes.top + ' ' + classes.left);\r\n                break;\r\n            case 'top-center':\r\n                addClass(element, classes.top + ' ' + classes.center);\r\n                break;\r\n            case 'bottom-left':\r\n                addClass(element, classes.bottom + ' ' + classes.left);\r\n                break;\r\n            case 'bottom-center':\r\n                addClass(element, classes.bottom + ' ' + classes.center);\r\n                break;\r\n\r\n            default:\r\n            case 'bottom-right':\r\n                addClass(element, classes.bottom + ' ' + classes.right);\r\n                break;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * creates a new notification message\r\n        *\r\n        * @param  {DOMElement} message\tThe notifier message element\r\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n        *\r\n        * @return {undefined}\r\n        */\r\n        function create(div, callback) {\r\n\r\n            function clickDelegate(event, instance) {\r\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\r\n                    instance.dismiss(true);\r\n                }\r\n            }\r\n\r\n            function transitionDone(event, instance) {\r\n                // unbind event\r\n                off(instance.element, transition.type, transitionDone);\r\n                // remove the message\r\n                element.removeChild(instance.element);\r\n            }\r\n\r\n            function initialize(instance) {\r\n                if (!instance.__internal) {\r\n                    instance.__internal = {\r\n                        pushed: false,\r\n                        delay : undefined,\r\n                        timer: undefined,\r\n                        clickHandler: undefined,\r\n                        transitionEndHandler: undefined,\r\n                        transitionTimeout: undefined\r\n                    };\r\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\r\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\r\n                }\r\n                return instance;\r\n            }\r\n            function clearTimers(instance) {\r\n                clearTimeout(instance.__internal.timer);\r\n                clearTimeout(instance.__internal.transitionTimeout);\r\n            }\r\n            return initialize({\r\n                /* notification DOM element*/\r\n                element: div,\r\n                /*\r\n                 * Pushes a notification message\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                push: function (_content, _wait) {\r\n                    if (!this.__internal.pushed) {\r\n\r\n                        pushInstance(this);\r\n                        clearTimers(this);\r\n\r\n                        var content, wait;\r\n                        switch (arguments.length) {\r\n                        case 0:\r\n                            wait = this.__internal.delay;\r\n                            break;\r\n                        case 1:\r\n                            if (typeof (_content) === 'number') {\r\n                                wait = _content;\r\n                            } else {\r\n                                content = _content;\r\n                                wait = this.__internal.delay;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            content = _content;\r\n                            wait = _wait;\r\n                            break;\r\n                        }\r\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\r\n                        // set contents\r\n                        if (typeof content !== 'undefined') {\r\n                            this.setContent(content);\r\n                        }\r\n                        // append or insert\r\n                        if (notifier.__internal.position.indexOf('top') < 0) {\r\n                            element.appendChild(this.element);\r\n                        } else {\r\n                            element.insertBefore(this.element, element.firstChild);\r\n                        }\r\n                        reflow = this.element.offsetWidth;\r\n                        addClass(this.element, classes.visible);\r\n                        // attach click event\r\n                        on(this.element, 'click', this.__internal.clickHandler);\r\n                        return this.delay(wait);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * {Function} callback function to be invoked before dismissing the notification message.\r\n                 * Remarks: A return value === 'false' will cancel the dismissal\r\n                 *\r\n                 */\r\n                ondismiss: function () { },\r\n                /*\r\n                 * {Function} callback function to be invoked when the message is dismissed.\r\n                 *\r\n                 */\r\n                callback: callback,\r\n                /*\r\n                 * Dismisses the notification message\r\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                 *\r\n                 */\r\n                dismiss: function (clicked) {\r\n                    if (this.__internal.pushed) {\r\n                        clearTimers(this);\r\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\r\n                            //detach click event\r\n                            off(this.element, 'click', this.__internal.clickHandler);\r\n                            // ensure element exists\r\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\r\n                                //transition end or fallback\r\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\r\n                                removeClass(this.element, classes.visible);\r\n\r\n                                // custom callback on dismiss\r\n                                if (typeof this.callback === 'function') {\r\n                                    this.callback.call(this, clicked);\r\n                                }\r\n                            }\r\n                            popInstance(this);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Delays the notification message dismissal\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                delay: function (wait) {\r\n                    clearTimers(this);\r\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\r\n                    if (this.__internal.delay > 0) {\r\n                        var  self = this;\r\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Sets the notification message contents\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 *\r\n                 */\r\n                setContent: function (content) {\r\n                    if (typeof content === 'string') {\r\n                        clearContents(this.element);\r\n                        this.element.innerHTML = content;\r\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\r\n                        clearContents(this.element);\r\n                        this.element.appendChild(content);\r\n                    }\r\n                    if(this.__internal.closeButton){\r\n                        var close = document.createElement('span');\r\n                        addClass(close, classes.close);\r\n                        close.setAttribute('data-close', true);\r\n                        this.element.appendChild(close);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Dismisses all open notifications except this.\r\n                 *\r\n                 */\r\n                dismissOthers: function () {\r\n                    notifier.dismissAll(this);\r\n                    return this;\r\n                }\r\n            });\r\n        }\r\n\r\n        //notifier api\r\n        return {\r\n            /**\r\n             * Gets or Sets notifier settings.\r\n             *\r\n             * @param {string} key The setting name\r\n             * @param {Variant} value The setting value.\r\n             *\r\n             * @return {Object}\tif the called as a setter, return the notifier instance.\r\n             */\r\n            setting: function (key, value) {\r\n                //ensure init\r\n                initialize(this);\r\n\r\n                if (typeof value === 'undefined') {\r\n                    //get\r\n                    return this.__internal[key];\r\n                } else {\r\n                    //set\r\n                    switch (key) {\r\n                    case 'position':\r\n                        this.__internal.position = value;\r\n                        updatePosition(this);\r\n                        break;\r\n                    case 'delay':\r\n                        this.__internal.delay = value;\r\n                        break;\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options\r\n             */\r\n            set:function(key,value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options\r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n             * Creates a new notification message\r\n             *\r\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            create: function (type, callback) {\r\n                //ensure notifier init\r\n                initialize(this);\r\n                //create new notification message\r\n                var div = document.createElement('div');\r\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ' + classes.prefix + type : '');\r\n                return create(div, callback);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications.\r\n             *\r\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n             *\r\n             */\r\n            dismissAll: function (except) {\r\n                var clone = openInstances.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var  instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.dismiss();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Alertify public API\r\n     * This contains everything that is exposed through the alertify object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function Alertify() {\r\n\r\n        // holds a references of created dialogs\r\n        var dialogs = {};\r\n\r\n        /**\r\n         * Extends a given prototype by merging properties from base into sub.\r\n         *\r\n         * @sub {Object} sub The prototype being overwritten.\r\n         * @base {Object} base The prototype being written.\r\n         *\r\n         * @return {Object} The extended prototype.\r\n         */\r\n        function extend(sub, base) {\r\n            // copy dialog pototype over definition.\r\n            for (var prop in base) {\r\n                if (base.hasOwnProperty(prop)) {\r\n                    sub[prop] = base[prop];\r\n                }\r\n            }\r\n            return sub;\r\n        }\r\n\r\n\r\n        /**\r\n        * Helper: returns a dialog instance from saved dialogs.\r\n        * and initializes the dialog if its not already initialized.\r\n        *\r\n        * @name {String} name The dialog name.\r\n        *\r\n        * @return {Object} The dialog instance.\r\n        */\r\n        function get_dialog(name) {\r\n            var dialog = dialogs[name].dialog;\r\n            //initialize the dialog if its not already initialized.\r\n            if (dialog && typeof dialog.__init === 'function') {\r\n                dialog.__init(dialog);\r\n            }\r\n            return dialog;\r\n        }\r\n\r\n        /**\r\n         * Helper:  registers a new dialog definition.\r\n         *\r\n         * @name {String} name The dialog name.\r\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n         * @base {String} base the name of another dialog to inherit from.\r\n         *\r\n         * @return {Object} The dialog definition.\r\n         */\r\n        function register(name, Factory, transient, base) {\r\n            var definition = {\r\n                dialog: null,\r\n                factory: Factory\r\n            };\r\n\r\n            //if this is based on an existing dialog, create a new definition\r\n            //by applying the new protoype over the existing one.\r\n            if (base !== undefined) {\r\n                definition.factory = function () {\r\n                    return extend(new dialogs[base].factory(), new Factory());\r\n                };\r\n            }\r\n\r\n            if (!transient) {\r\n                //create a new definition based on dialog\r\n                definition.dialog = extend(new definition.factory(), dialog);\r\n            }\r\n            return dialogs[name] = definition;\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * Alertify defaults\r\n             * \r\n             * @type {Object}\r\n             */\r\n            defaults: defaults,\r\n            /**\r\n             * Dialogs factory \r\n             *\r\n             * @param {string}      Dialog name.\r\n             * @param {Function}    A Dialog factory function.\r\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n             * @param {String}      The name of the base type to inherit from.\r\n             */\r\n            dialog: function (name, Factory, transient, base) {\r\n\r\n                // get request, create a new instance and return it.\r\n                if (typeof Factory !== 'function') {\r\n                    return get_dialog(name);\r\n                }\r\n\r\n                if (this.hasOwnProperty(name)) {\r\n                    throw new Error('alertify.dialog: name already exists');\r\n                }\r\n\r\n                // register the dialog\r\n                var definition = register(name, Factory, transient, base);\r\n\r\n                if (transient) {\r\n\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var instance = extend(new definition.factory(), dialog);\r\n                            //ensure init\r\n                            if (instance && typeof instance.__init === 'function') {\r\n                                instance.__init(instance);\r\n                            }\r\n                            instance['main'].apply(instance, arguments);\r\n                            return instance['show'].apply(instance);\r\n                        }\r\n                    };\r\n                } else {\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //ensure init\r\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\r\n                            definition.dialog.__init(definition.dialog);\r\n                        }\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var dialog = definition.dialog;\r\n                            dialog['main'].apply(definition.dialog, arguments);\r\n                            return dialog['show'].apply(definition.dialog);\r\n                        }\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * Close all open dialogs.\r\n             *\r\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeAll: function (except) {\r\n                var clone = openDialogs.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.close();\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n             *\r\n             * @param {string} name The dialog name.\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting: function (name, key, value) {\r\n\r\n                if (name === 'notifier') {\r\n                    return notifier.setting(key, value);\r\n                }\r\n\r\n                var dialog = get_dialog(name);\r\n                if (dialog) {\r\n                    return dialog.setting(key, value);\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set: function(name,key,value){\r\n                return this.setting(name, key,value);\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get: function(name, key){\r\n                return this.setting(name, key);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n             * This allows for custom look and feel for various types of notifications.\r\n             *\r\n             * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n             * @param  {String}                 [type='']\t\t\t\tType of log message\r\n             * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            notify: function (message, type, wait, callback) {\r\n                return notifier.create(type, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            message: function (message, wait, callback) {\r\n                return notifier.create(null, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'success'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            success: function (message, wait, callback) {\r\n                return notifier.create('success', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'error'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            error: function (message, wait, callback) {\r\n                return notifier.create('error', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'warning'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            warning: function (message, wait, callback) {\r\n                return notifier.create('warning', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            dismissAll: function () {\r\n                notifier.dismissAll();\r\n            }\r\n        };\r\n    }\r\n    var alertify = new Alertify();\r\n\r\n    /**\r\n    * Alert dialog definition\r\n    *\r\n    * invoked by:\r\n    *\talertify.alert(message);\r\n    *\talertify.alert(title, message);\r\n    *\talertify.alert(message, onok);\r\n    *\talertify.alert(title, message, onok);\r\n     */\r\n    alertify.dialog('alert', function () {\r\n        return {\r\n            main: function (_title, _message, _onok) {\r\n                var title, message, onok;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    if (typeof _message === 'function') {\r\n                        message = _title;\r\n                        onok = _message;\r\n                    } else {\r\n                        title = _title;\r\n                        message = _message;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.ok,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                // nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                onok: undefined,\r\n                label: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'label':\r\n                    if (this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue;\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                if (typeof this.get('onok') === 'function') {\r\n                    var returnValue = this.get('onok').call(this, closeEvent);\r\n                    if (typeof returnValue !== 'undefined') {\r\n                        closeEvent.cancel = !returnValue;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Confirm dialog object\r\n     *\r\n     *\talertify.confirm(message);\r\n     *\talertify.confirm(message, onok);\r\n     *\talertify.confirm(message, onok, oncancel);\r\n     *\talertify.confirm(title, message, onok, oncancel);\r\n     */\r\n    alertify.dialog('confirm', function () {\r\n\r\n        var autoConfirm = {\r\n            timer: null,\r\n            index: null,\r\n            text: null,\r\n            duration: null,\r\n            task: function (event, self) {\r\n                if (self.isOpen()) {\r\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\r\n                    autoConfirm.duration -= 1;\r\n                    if (autoConfirm.duration === -1) {\r\n                        clearAutoConfirm(self);\r\n                        var button = self.__internal.buttons[autoConfirm.index];\r\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\r\n\r\n                        if (typeof self.callback === 'function') {\r\n                            self.callback.apply(self, [closeEvent]);\r\n                        }\r\n                        //close the dialog.\r\n                        if (closeEvent.close !== false) {\r\n                            self.close();\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearAutoConfirm(self);\r\n                }\r\n            }\r\n        };\r\n\r\n        function clearAutoConfirm(self) {\r\n            if (autoConfirm.timer !== null) {\r\n                clearInterval(autoConfirm.timer);\r\n                autoConfirm.timer = null;\r\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\r\n            }\r\n        }\r\n\r\n        function startAutoConfirm(self, index, duration) {\r\n            clearAutoConfirm(self);\r\n            autoConfirm.duration = duration;\r\n            autoConfirm.index = index;\r\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\r\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\r\n            autoConfirm.task(null, self);\r\n        }\r\n\r\n\r\n        return {\r\n            main: function (_title, _message, _onok, _oncancel) {\r\n                var title, message, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 4:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                //nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: null,\r\n                labels: null,\r\n                onok: null,\r\n                oncancel: null,\r\n                defaultFocus: null,\r\n                reverseButtons: null,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'labels':\r\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].text = newValue.ok;\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].text = newValue.cancel;\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                case 'defaultFocus':\r\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                clearAutoConfirm(this);\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            autoOk: function (duration) {\r\n                startAutoConfirm(this, 0, duration);\r\n                return this;\r\n            },\r\n            autoCancel: function (duration) {\r\n                startAutoConfirm(this, 1, duration);\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Prompt dialog object\r\n     *\r\n     * invoked by:\r\n     *\talertify.prompt(message);\r\n     *\talertify.prompt(message, value);\r\n     *\talertify.prompt(message, value, onok);\r\n     *\talertify.prompt(message, value, onok, oncancel);\r\n     *\talertify.prompt(title, message, value, onok, oncancel);\r\n     */\r\n    alertify.dialog('prompt', function () {\r\n        var input = document.createElement('INPUT');\r\n        var p = document.createElement('P');\r\n        return {\r\n            main: function (_title, _message, _value, _onok, _oncancel) {\r\n                var title, message, value, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    value = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    break;\r\n                case 4:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 5:\r\n                    title = _title;\r\n                    message = _message;\r\n                    value = _value;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('value', value);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: input,\r\n                        select: true\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                input.className = alertify.defaults.theme.input;\r\n                input.setAttribute('type', 'text');\r\n                input.value = this.get('value');\r\n                this.elements.content.appendChild(p);\r\n                this.elements.content.appendChild(input);\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                if (typeof message === 'string') {\r\n                    clearContents(p);\r\n                    p.innerHTML = message;\r\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\r\n                    clearContents(p);\r\n                    p.appendChild(message);\r\n                }\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                labels: undefined,\r\n                onok: undefined,\r\n                oncancel: undefined,\r\n                value: '',\r\n                type:'text',\r\n                reverseButtons: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'value':\r\n                    input.value = newValue;\r\n                    break;\r\n                case 'type':\r\n                    switch (newValue) {\r\n                    case 'text':\r\n                    case 'color':\r\n                    case 'date':\r\n                    case 'datetime-local':\r\n                    case 'email':\r\n                    case 'month':\r\n                    case 'number':\r\n                    case 'password':\r\n                    case 'search':\r\n                    case 'tel':\r\n                    case 'time':\r\n                    case 'week':\r\n                        input.type = newValue;\r\n                        break;\r\n                    default:\r\n                        input.type = 'text';\r\n                        break;\r\n                    }\r\n                    break;\r\n                case 'labels':\r\n                    if (newValue.ok && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    this.settings.value = input.value;\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    if(!closeEvent.cancel){\r\n                        input.value = this.settings.value;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    // CommonJS\r\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\r\n        module.exports = alertify;\r\n    // AMD\r\n    } else if ( typeof define === 'function' && define.amd) {\r\n        define( [], function () {\r\n            return alertify;\r\n        } );\r\n    // window\r\n    } else if ( !window.alertify ) {\r\n        window.alertify = alertify;\r\n    }\r\n\r\n} ( typeof window !== 'undefined' ? window : this ) );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}